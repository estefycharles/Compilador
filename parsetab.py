
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT ATTRIBUTES BEGIN BOOL CBRACKET CLASS COLON COMMA CPAREN CSQUAREBR DEC DIFFERENT DIVIDE ELSE END EOF EQUAL FX GREATERTHAN GREATERTHANEQ ID IF INPUT INT LESSTHAN LESSTHANEQ MAIN METHODS MINUS MONEY MULTIPLY OBRACKET OPAREN OSQUAREBR OUTPUT PLUS RETURN STRING VAR VOID WHILE begin : BEGIN OPAREN ID CPAREN classDef fxDef  main end  pointMain :  main : MAIN pointMain OPAREN CPAREN OBRACKET body CBRACKET  fxDef : VOID FX pointFx ID OPAREN param pointFxParam CPAREN OBRACKET body pointVars CBRACKET pointFxType fxDef\n                | fxType FX pointFx ID OPAREN param pointFxParam CPAREN OBRACKET body pointVars RETURN ID EOF CBRACKET pointFxType fxDef\n                | epsilon  fxType : INT\n                | STRING\n                | DEC\n                | BOOL  pointFx :  pointFxId :  pointFxType :  pointFxParam :  pointVars :  param : simpleType ID \n            | simpleType ID COMMA param\n            | epsilon  paramCall : ID \n                  | ID COMMA paramCall \n                  | epsilon  voidCall : ID OPAREN paramCall CPAREN EOF  body : varsDef body\n            | statements body\n            | epsilon  statements : assignmentDef\n                   | input\n                   | output\n                   | voidCall \n                   | whileCycle\n                   | ifCond \n                   | classCall  varsDef : VAR objType var EOF \n                | VAR varSimpleType var EOF  varSimpleType : INT\n                      | STRING\n                      | DEC\n                      | BOOL  var : varsType \n            | varsType COMMA var  varsType : ID\n                | arrDef\n                | matrixDef  arrDef : ID OSQUAREBR varCte CSQUAREBR  matrixDef : arrDef OSQUAREBR varCte CSQUAREBR  assignmentDef : ID ASSIGNMENT expAssignment  expAssignment : expRelational EOF\n                      | returnCall EOF\n                      | classCall  returnCall : ID OPAREN paramCall CPAREN  expRelational : plusMinus \n                    | plusMinus opRelational expRelational  opRelational : EQUAL\n                    | DIFFERENT\n                    | GREATERTHAN\n                    | GREATERTHANEQ \n                    | LESSTHAN \n                    | LESSTHANEQ  plusMinus : multDiv\n                | multDiv PLUS plusMinus\n                | multDiv MINUS plusMinus  multDiv : expParen \n                | expParen MULTIPLY multDiv\n                | expParen DIVIDE multDiv  expParen : OPAREN expRelational CPAREN\n                | varCte  classDef : CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON varsDef METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef\n                | epsilon  pointScopeClass :  pointScopeClass2 :  pointClassName :  pointClass :  classCall : ID MONEY ID OPAREN paramCall CPAREN EOF  simpleType : INT\n                    | STRING\n                    | DEC \n                    | BOOL  objType : ID  varCte : INT \n                | DEC\n                | STRING\n                | ID  whileCycle : WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET  ifCond : IF OPAREN expRelational CPAREN OBRACKET body CBRACKET \n                | ifCond ELSE OBRACKET body CBRACKET  input : INPUT OPAREN ID CPAREN EOF  output : OUTPUT OPAREN expRelational CPAREN EOF  end : END OPAREN ID CPAREN  epsilon : '
    
_lr_action_items = {'BEGIN':([0,],[2,]),'$end':([1,23,39,],[0,-1,-88,]),'OPAREN':([2,19,24,25,31,32,62,63,64,65,66,82,86,87,88,100,106,116,135,136,137,138,139,140,141,143,144,145,146,],[3,-2,29,30,36,37,83,85,86,87,88,106,106,106,106,132,106,149,106,-53,-54,-55,-56,-57,-58,106,106,106,106,]),'ID':([3,7,17,20,21,26,27,29,40,42,44,45,46,47,51,52,54,55,56,57,58,59,60,61,74,75,76,77,78,79,80,82,83,84,85,86,87,88,99,101,104,106,122,124,126,127,128,129,130,132,133,134,135,136,137,138,139,140,141,143,144,145,146,147,149,160,169,171,172,173,174,185,187,188,189,],[4,-72,22,-11,-11,31,32,34,62,68,-74,-75,-76,-77,62,62,76,-26,-27,-28,-29,-30,-31,-32,95,95,-78,-35,-36,-37,-38,100,113,116,117,119,119,119,62,-46,-49,119,62,62,-33,95,119,119,-34,113,-47,-48,119,-53,-54,-55,-56,-57,-58,119,119,119,119,113,113,-85,-22,-86,-87,62,62,191,-73,-83,-84,]),'CPAREN':([4,30,34,36,37,41,43,48,67,68,69,83,90,105,107,108,109,110,111,112,113,114,115,117,118,119,120,121,123,132,142,147,149,161,162,163,164,165,166,167,168,170,],[5,35,39,-89,-89,-14,-18,-14,89,-16,91,-89,-89,-51,-59,-62,-66,-79,-80,-81,-19,148,-21,150,151,-82,152,153,-17,-89,163,-89,-89,180,-52,-65,-60,-61,-63,-64,-20,181,]),'CLASS':([5,192,],[7,7,]),'VOID':([5,6,8,125,156,184,190,192,195,196,197,],[-89,10,-68,-69,10,-13,10,-89,-67,-13,10,]),'INT':([5,6,8,36,37,54,82,86,87,88,90,106,125,128,129,135,136,137,138,139,140,141,143,144,145,146,156,184,190,192,195,196,197,],[-89,13,-68,44,44,77,110,110,110,110,44,110,-69,110,110,110,-53,-54,-55,-56,-57,-58,110,110,110,110,13,-13,13,-89,-67,-13,13,]),'STRING':([5,6,8,36,37,54,82,86,87,88,90,106,125,128,129,135,136,137,138,139,140,141,143,144,145,146,156,184,190,192,195,196,197,],[-89,14,-68,45,45,78,112,112,112,112,45,112,-69,112,112,112,-53,-54,-55,-56,-57,-58,112,112,112,112,14,-13,14,-89,-67,-13,14,]),'DEC':([5,6,8,36,37,54,82,86,87,88,90,106,125,128,129,135,136,137,138,139,140,141,143,144,145,146,156,184,190,192,195,196,197,],[-89,15,-68,46,46,79,111,111,111,111,46,111,-69,111,111,111,-53,-54,-55,-56,-57,-58,111,111,111,111,15,-13,15,-89,-67,-13,15,]),'BOOL':([5,6,8,36,37,54,90,125,156,184,190,192,195,196,197,],[-89,16,-68,47,47,80,47,-69,16,-13,16,-89,-67,-13,16,]),'MAIN':([5,6,8,9,12,184,190,192,193,195,196,197,198,],[-89,-89,-68,19,-6,-13,-89,-89,-4,-67,-13,-89,-5,]),'FX':([10,11,13,14,15,16,],[20,21,-7,-8,-9,-10,]),'CBRACKET':([12,40,50,51,52,53,55,56,57,58,59,60,61,72,73,99,101,104,122,125,126,130,131,133,134,154,156,160,169,171,172,173,174,175,177,182,183,184,186,187,188,189,190,193,194,196,197,198,],[-6,-89,71,-89,-89,-25,-26,-27,-28,-29,-30,-31,-32,-23,-24,-89,-46,-49,-89,-69,-33,-34,160,-47,-48,-15,-89,-85,-22,-86,-87,-89,-89,184,-70,188,189,-13,192,-73,-83,-84,-89,-4,196,-13,-89,-5,]),'END':([18,71,],[24,-3,]),'OBRACKET':([22,28,35,81,89,91,152,153,],[-71,33,40,99,122,124,173,174,]),'ATTRIBUTES':([33,],[38,]),'COLON':([38,92,],[49,125,]),'VAR':([40,49,51,52,55,56,57,58,59,60,61,99,101,104,122,124,126,130,133,134,160,169,171,172,173,174,187,188,189,],[54,54,54,54,-26,-27,-28,-29,-30,-31,-32,54,-46,-49,54,54,-33,-34,-47,-48,-85,-22,-86,-87,54,54,-73,-83,-84,]),'INPUT':([40,51,52,55,56,57,58,59,60,61,99,101,104,122,124,126,130,133,134,160,169,171,172,173,174,187,188,189,],[63,63,63,-26,-27,-28,-29,-30,-31,-32,63,-46,-49,63,63,-33,-34,-47,-48,-85,-22,-86,-87,63,63,-73,-83,-84,]),'OUTPUT':([40,51,52,55,56,57,58,59,60,61,99,101,104,122,124,126,130,133,134,160,169,171,172,173,174,187,188,189,],[64,64,64,-26,-27,-28,-29,-30,-31,-32,64,-46,-49,64,64,-33,-34,-47,-48,-85,-22,-86,-87,64,64,-73,-83,-84,]),'WHILE':([40,51,52,55,56,57,58,59,60,61,99,101,104,122,124,126,130,133,134,160,169,171,172,173,174,187,188,189,],[65,65,65,-26,-27,-28,-29,-30,-31,-32,65,-46,-49,65,65,-33,-34,-47,-48,-85,-22,-86,-87,65,65,-73,-83,-84,]),'IF':([40,51,52,55,56,57,58,59,60,61,99,101,104,122,124,126,130,133,134,160,169,171,172,173,174,187,188,189,],[66,66,66,-26,-27,-28,-29,-30,-31,-32,66,-46,-49,66,66,-33,-34,-47,-48,-85,-22,-86,-87,66,66,-73,-83,-84,]),'RETURN':([51,52,53,55,56,57,58,59,60,61,72,73,101,104,124,126,130,133,134,155,160,169,171,172,176,187,188,189,],[-89,-89,-25,-26,-27,-28,-29,-30,-31,-32,-23,-24,-46,-49,-89,-33,-34,-47,-48,-15,-85,-22,-86,-87,185,-73,-83,-84,]),'ELSE':([60,160,189,],[81,-85,-84,]),'ASSIGNMENT':([62,],[82,]),'MONEY':([62,100,],[84,84,]),'COMMA':([68,94,95,96,97,113,178,179,],[90,127,-41,-42,-43,147,-44,-45,]),'METHODS':([70,126,130,],[92,-33,-34,]),'EOF':([93,94,95,96,97,98,100,102,103,105,107,108,109,110,111,112,119,148,150,151,157,162,163,164,165,166,167,178,179,180,181,191,],[126,-39,-41,-42,-43,130,-82,133,134,-51,-59,-62,-66,-79,-80,-81,-82,169,171,172,-40,-52,-65,-60,-61,-63,-64,-44,-45,-50,187,194,]),'OSQUAREBR':([95,96,178,],[128,129,-44,]),'MULTIPLY':([100,108,109,110,111,112,119,163,],[-82,145,-66,-79,-80,-81,-82,-65,]),'DIVIDE':([100,108,109,110,111,112,119,163,],[-82,146,-66,-79,-80,-81,-82,-65,]),'PLUS':([100,107,108,109,110,111,112,119,163,166,167,],[-82,143,-62,-66,-79,-80,-81,-82,-65,-63,-64,]),'MINUS':([100,107,108,109,110,111,112,119,163,166,167,],[-82,144,-62,-66,-79,-80,-81,-82,-65,-63,-64,]),'EQUAL':([100,105,107,108,109,110,111,112,119,163,164,165,166,167,],[-82,136,-59,-62,-66,-79,-80,-81,-82,-65,-60,-61,-63,-64,]),'DIFFERENT':([100,105,107,108,109,110,111,112,119,163,164,165,166,167,],[-82,137,-59,-62,-66,-79,-80,-81,-82,-65,-60,-61,-63,-64,]),'GREATERTHAN':([100,105,107,108,109,110,111,112,119,163,164,165,166,167,],[-82,138,-59,-62,-66,-79,-80,-81,-82,-65,-60,-61,-63,-64,]),'GREATERTHANEQ':([100,105,107,108,109,110,111,112,119,163,164,165,166,167,],[-82,139,-59,-62,-66,-79,-80,-81,-82,-65,-60,-61,-63,-64,]),'LESSTHAN':([100,105,107,108,109,110,111,112,119,163,164,165,166,167,],[-82,140,-59,-62,-66,-79,-80,-81,-82,-65,-60,-61,-63,-64,]),'LESSTHANEQ':([100,105,107,108,109,110,111,112,119,163,164,165,166,167,],[-82,141,-59,-62,-66,-79,-80,-81,-82,-65,-60,-61,-63,-64,]),'CSQUAREBR':([110,111,112,119,158,159,],[-79,-80,-81,-82,178,179,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'begin':([0,],[1,]),'classDef':([5,192,],[6,195,]),'epsilon':([5,6,36,37,40,51,52,83,90,99,122,124,132,147,149,156,173,174,190,192,197,],[8,12,43,43,53,53,53,115,43,53,53,53,115,115,115,12,53,53,12,8,12,]),'fxDef':([6,156,190,197,],[9,177,193,198,]),'fxType':([6,156,190,197,],[11,11,11,11,]),'pointClass':([7,],[17,]),'main':([9,],[18,]),'end':([18,],[23,]),'pointMain':([19,],[25,]),'pointFx':([20,21,],[26,27,]),'pointClassName':([22,],[28,]),'param':([36,37,90,],[41,48,123,]),'simpleType':([36,37,90,],[42,42,42,]),'body':([40,51,52,99,122,124,173,174,],[50,72,73,131,154,155,182,183,]),'varsDef':([40,49,51,52,99,122,124,173,174,],[51,70,51,51,51,51,51,51,51,]),'statements':([40,51,52,99,122,124,173,174,],[52,52,52,52,52,52,52,52,]),'assignmentDef':([40,51,52,99,122,124,173,174,],[55,55,55,55,55,55,55,55,]),'input':([40,51,52,99,122,124,173,174,],[56,56,56,56,56,56,56,56,]),'output':([40,51,52,99,122,124,173,174,],[57,57,57,57,57,57,57,57,]),'voidCall':([40,51,52,99,122,124,173,174,],[58,58,58,58,58,58,58,58,]),'whileCycle':([40,51,52,99,122,124,173,174,],[59,59,59,59,59,59,59,59,]),'ifCond':([40,51,52,99,122,124,173,174,],[60,60,60,60,60,60,60,60,]),'classCall':([40,51,52,82,99,122,124,173,174,],[61,61,61,104,61,61,61,61,61,]),'pointFxParam':([41,48,],[67,69,]),'objType':([54,],[74,]),'varSimpleType':([54,],[75,]),'var':([74,75,127,],[93,98,157,]),'varsType':([74,75,127,],[94,94,94,]),'arrDef':([74,75,127,],[96,96,96,]),'matrixDef':([74,75,127,],[97,97,97,]),'expAssignment':([82,],[101,]),'expRelational':([82,86,87,88,106,135,],[102,118,120,121,142,162,]),'returnCall':([82,],[103,]),'plusMinus':([82,86,87,88,106,135,143,144,],[105,105,105,105,105,105,164,165,]),'multDiv':([82,86,87,88,106,135,143,144,145,146,],[107,107,107,107,107,107,107,107,166,167,]),'expParen':([82,86,87,88,106,135,143,144,145,146,],[108,108,108,108,108,108,108,108,108,108,]),'varCte':([82,86,87,88,106,128,129,135,143,144,145,146,],[109,109,109,109,109,158,159,109,109,109,109,109,]),'paramCall':([83,132,147,149,],[114,161,168,170,]),'opRelational':([105,],[135,]),'pointScopeClass':([125,],[156,]),'pointVars':([154,155,],[175,176,]),'pointScopeClass2':([177,],[186,]),'pointFxType':([184,196,],[190,197,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> begin","S'",1,None,None,None),
  ('begin -> BEGIN OPAREN ID CPAREN classDef fxDef main end','begin',8,'p_begin','parserr.py',30),
  ('pointMain -> <empty>','pointMain',0,'p_pointMain','parserr.py',36),
  ('main -> MAIN pointMain OPAREN CPAREN OBRACKET body CBRACKET','main',7,'p_main','parserr.py',42),
  ('fxDef -> VOID FX pointFx ID OPAREN param pointFxParam CPAREN OBRACKET body pointVars CBRACKET pointFxType fxDef','fxDef',14,'p_fxDef','parserr.py',46),
  ('fxDef -> fxType FX pointFx ID OPAREN param pointFxParam CPAREN OBRACKET body pointVars RETURN ID EOF CBRACKET pointFxType fxDef','fxDef',17,'p_fxDef','parserr.py',47),
  ('fxDef -> epsilon','fxDef',1,'p_fxDef','parserr.py',48),
  ('fxType -> INT','fxType',1,'p_fxType','parserr.py',52),
  ('fxType -> STRING','fxType',1,'p_fxType','parserr.py',53),
  ('fxType -> DEC','fxType',1,'p_fxType','parserr.py',54),
  ('fxType -> BOOL','fxType',1,'p_fxType','parserr.py',55),
  ('pointFx -> <empty>','pointFx',0,'p_pointFx','parserr.py',62),
  ('pointFxId -> <empty>','pointFxId',0,'p_pointFxId','parserr.py',71),
  ('pointFxType -> <empty>','pointFxType',0,'p_pointFxType','parserr.py',75),
  ('pointFxParam -> <empty>','pointFxParam',0,'p_pointFxParam','parserr.py',79),
  ('pointVars -> <empty>','pointVars',0,'p_pointVars','parserr.py',91),
  ('param -> simpleType ID','param',2,'p_param','parserr.py',94),
  ('param -> simpleType ID COMMA param','param',4,'p_param','parserr.py',95),
  ('param -> epsilon','param',1,'p_param','parserr.py',96),
  ('paramCall -> ID','paramCall',1,'p_paramCall','parserr.py',103),
  ('paramCall -> ID COMMA paramCall','paramCall',3,'p_paramCall','parserr.py',104),
  ('paramCall -> epsilon','paramCall',1,'p_paramCall','parserr.py',105),
  ('voidCall -> ID OPAREN paramCall CPAREN EOF','voidCall',5,'p_voidCall','parserr.py',110),
  ('body -> varsDef body','body',2,'p_body','parserr.py',115),
  ('body -> statements body','body',2,'p_body','parserr.py',116),
  ('body -> epsilon','body',1,'p_body','parserr.py',117),
  ('statements -> assignmentDef','statements',1,'p_statements','parserr.py',122),
  ('statements -> input','statements',1,'p_statements','parserr.py',123),
  ('statements -> output','statements',1,'p_statements','parserr.py',124),
  ('statements -> voidCall','statements',1,'p_statements','parserr.py',125),
  ('statements -> whileCycle','statements',1,'p_statements','parserr.py',126),
  ('statements -> ifCond','statements',1,'p_statements','parserr.py',127),
  ('statements -> classCall','statements',1,'p_statements','parserr.py',128),
  ('varsDef -> VAR objType var EOF','varsDef',4,'p_varsDef','parserr.py',133),
  ('varsDef -> VAR varSimpleType var EOF','varsDef',4,'p_varsDef','parserr.py',134),
  ('varSimpleType -> INT','varSimpleType',1,'p_varSimpleType','parserr.py',138),
  ('varSimpleType -> STRING','varSimpleType',1,'p_varSimpleType','parserr.py',139),
  ('varSimpleType -> DEC','varSimpleType',1,'p_varSimpleType','parserr.py',140),
  ('varSimpleType -> BOOL','varSimpleType',1,'p_varSimpleType','parserr.py',141),
  ('var -> varsType','var',1,'p_var','parserr.py',147),
  ('var -> varsType COMMA var','var',3,'p_var','parserr.py',148),
  ('varsType -> ID','varsType',1,'p_varsType','parserr.py',153),
  ('varsType -> arrDef','varsType',1,'p_varsType','parserr.py',154),
  ('varsType -> matrixDef','varsType',1,'p_varsType','parserr.py',155),
  ('arrDef -> ID OSQUAREBR varCte CSQUAREBR','arrDef',4,'p_arrDef','parserr.py',161),
  ('matrixDef -> arrDef OSQUAREBR varCte CSQUAREBR','matrixDef',4,'p_matrixDef','parserr.py',166),
  ('assignmentDef -> ID ASSIGNMENT expAssignment','assignmentDef',3,'p_assignmentDef','parserr.py',171),
  ('expAssignment -> expRelational EOF','expAssignment',2,'p_expAssignment','parserr.py',176),
  ('expAssignment -> returnCall EOF','expAssignment',2,'p_expAssignment','parserr.py',177),
  ('expAssignment -> classCall','expAssignment',1,'p_expAssignment','parserr.py',178),
  ('returnCall -> ID OPAREN paramCall CPAREN','returnCall',4,'p_returnCall','parserr.py',182),
  ('expRelational -> plusMinus','expRelational',1,'p_expRelational','parserr.py',186),
  ('expRelational -> plusMinus opRelational expRelational','expRelational',3,'p_expRelational','parserr.py',187),
  ('opRelational -> EQUAL','opRelational',1,'p_opRelational','parserr.py',191),
  ('opRelational -> DIFFERENT','opRelational',1,'p_opRelational','parserr.py',192),
  ('opRelational -> GREATERTHAN','opRelational',1,'p_opRelational','parserr.py',193),
  ('opRelational -> GREATERTHANEQ','opRelational',1,'p_opRelational','parserr.py',194),
  ('opRelational -> LESSTHAN','opRelational',1,'p_opRelational','parserr.py',195),
  ('opRelational -> LESSTHANEQ','opRelational',1,'p_opRelational','parserr.py',196),
  ('plusMinus -> multDiv','plusMinus',1,'p_plusMinus','parserr.py',200),
  ('plusMinus -> multDiv PLUS plusMinus','plusMinus',3,'p_plusMinus','parserr.py',201),
  ('plusMinus -> multDiv MINUS plusMinus','plusMinus',3,'p_plusMinus','parserr.py',202),
  ('multDiv -> expParen','multDiv',1,'p_multDiv','parserr.py',206),
  ('multDiv -> expParen MULTIPLY multDiv','multDiv',3,'p_multDiv','parserr.py',207),
  ('multDiv -> expParen DIVIDE multDiv','multDiv',3,'p_multDiv','parserr.py',208),
  ('expParen -> OPAREN expRelational CPAREN','expParen',3,'p_expParen','parserr.py',212),
  ('expParen -> varCte','expParen',1,'p_expParen','parserr.py',213),
  ('classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON varsDef METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef','classDef',15,'p_classDef','parserr.py',217),
  ('classDef -> epsilon','classDef',1,'p_classDef','parserr.py',218),
  ('pointScopeClass -> <empty>','pointScopeClass',0,'p_pointScopeClass','parserr.py',222),
  ('pointScopeClass2 -> <empty>','pointScopeClass2',0,'p_pointScopeClass2','parserr.py',227),
  ('pointClassName -> <empty>','pointClassName',0,'p_pointClassName','parserr.py',232),
  ('pointClass -> <empty>','pointClass',0,'p_pointClass','parserr.py',238),
  ('classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF','classCall',7,'p_classCall','parserr.py',244),
  ('simpleType -> INT','simpleType',1,'p_simpleType','parserr.py',248),
  ('simpleType -> STRING','simpleType',1,'p_simpleType','parserr.py',249),
  ('simpleType -> DEC','simpleType',1,'p_simpleType','parserr.py',250),
  ('simpleType -> BOOL','simpleType',1,'p_simpleType','parserr.py',251),
  ('objType -> ID','objType',1,'p_objType','parserr.py',257),
  ('varCte -> INT','varCte',1,'p_varCte','parserr.py',261),
  ('varCte -> DEC','varCte',1,'p_varCte','parserr.py',262),
  ('varCte -> STRING','varCte',1,'p_varCte','parserr.py',263),
  ('varCte -> ID','varCte',1,'p_varCte','parserr.py',264),
  ('whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET','whileCycle',7,'p_whileCycle','parserr.py',268),
  ('ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET','ifCond',7,'p_ifCond','parserr.py',272),
  ('ifCond -> ifCond ELSE OBRACKET body CBRACKET','ifCond',5,'p_ifCond','parserr.py',273),
  ('input -> INPUT OPAREN ID CPAREN EOF','input',5,'p_input','parserr.py',277),
  ('output -> OUTPUT OPAREN expRelational CPAREN EOF','output',5,'p_output','parserr.py',281),
  ('end -> END OPAREN ID CPAREN','end',4,'p_END','parserr.py',285),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parserr.py',289),
]
