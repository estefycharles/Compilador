Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> begin
Rule 1     begin -> BEGIN OPAREN ID CPAREN classDef fxDef main end
Rule 2     pointMain -> <empty>
Rule 3     main -> MAIN pointMain OPAREN CPAREN OBRACKET body CBRACKET
Rule 4     fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
Rule 5     fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
Rule 6     fxDef -> epsilon
Rule 7     fxType -> INT
Rule 8     fxType -> STRING
Rule 9     fxType -> DEC
Rule 10    fxType -> BOOL
Rule 11    pointFx -> <empty>
Rule 12    pointFxId -> <empty>
Rule 13    param -> paramType ID pointParam
Rule 14    param -> paramType ID pointParam COMMA param
Rule 15    param -> epsilon
Rule 16    paramType -> INT
Rule 17    paramType -> STRING
Rule 18    paramType -> DEC
Rule 19    paramType -> BOOL
Rule 20    pointParam -> <empty>
Rule 21    paramCall -> ID
Rule 22    paramCall -> ID COMMA paramCall
Rule 23    paramCall -> epsilon
Rule 24    voidCall -> ID OPAREN paramCall CPAREN EOF
Rule 25    body -> varsDef body
Rule 26    body -> statements body
Rule 27    body -> epsilon
Rule 28    statements -> assignmentDef
Rule 29    statements -> input
Rule 30    statements -> output
Rule 31    statements -> voidCall
Rule 32    statements -> whileCycle
Rule 33    statements -> ifCond
Rule 34    statements -> classCall
Rule 35    varsDef -> VAR objType var EOF
Rule 36    varsDef -> VAR varSimpleType var EOF
Rule 37    varSimpleType -> INT
Rule 38    varSimpleType -> STRING
Rule 39    varSimpleType -> DEC
Rule 40    varSimpleType -> BOOL
Rule 41    var -> varsType
Rule 42    var -> varsType COMMA var
Rule 43    varsType -> ID
Rule 44    varsType -> arrDef
Rule 45    varsType -> matrixDef
Rule 46    arrDef -> ID OSQUAREBR varCte CSQUAREBR
Rule 47    matrixDef -> arrDef OSQUAREBR varCte CSQUAREBR
Rule 48    assignmentDef -> ID ASSIGNMENT expAssignment
Rule 49    expAssignment -> expRelational EOF
Rule 50    expAssignment -> returnCall EOF
Rule 51    expAssignment -> classCall
Rule 52    returnCall -> ID OPAREN paramCall CPAREN
Rule 53    expRelational -> plusMinus
Rule 54    expRelational -> plusMinus opRelational expRelational
Rule 55    opRelational -> EQUAL
Rule 56    opRelational -> DIFFERENT
Rule 57    opRelational -> GREATERTHAN
Rule 58    opRelational -> GREATERTHANEQ
Rule 59    opRelational -> LESSTHAN
Rule 60    opRelational -> LESSTHANEQ
Rule 61    plusMinus -> multDiv
Rule 62    plusMinus -> multDiv PLUS plusMinus
Rule 63    plusMinus -> multDiv MINUS plusMinus
Rule 64    multDiv -> expParen
Rule 65    multDiv -> expParen MULTIPLY multDiv
Rule 66    multDiv -> expParen DIVIDE multDiv
Rule 67    expParen -> OPAREN expRelational CPAREN
Rule 68    expParen -> varCte
Rule 69    classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
Rule 70    classDef -> epsilon
Rule 71    pointAtt -> varsDef
Rule 72    pointAtt -> varsDef pointAtt
Rule 73    pointScopeClass -> <empty>
Rule 74    pointScopeClass2 -> <empty>
Rule 75    pointClassName -> <empty>
Rule 76    pointClass -> <empty>
Rule 77    classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF
Rule 78    simpleType -> INT
Rule 79    simpleType -> STRING
Rule 80    simpleType -> DEC
Rule 81    simpleType -> BOOL
Rule 82    objType -> ID
Rule 83    varCte -> INT
Rule 84    varCte -> DEC
Rule 85    varCte -> STRING
Rule 86    varCte -> ID
Rule 87    whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
Rule 88    ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
Rule 89    ifCond -> ifCond ELSE OBRACKET body CBRACKET
Rule 90    input -> INPUT OPAREN ID CPAREN EOF
Rule 91    output -> OUTPUT OPAREN expRelational CPAREN EOF
Rule 92    end -> END OPAREN ID CPAREN
Rule 93    epsilon -> <empty>

Terminals, with rules where they appear

ASSIGNMENT           : 48
ATTRIBUTES           : 69
BEGIN                : 1
BOOL                 : 10 19 40 81
CBRACKET             : 3 4 5 69 87 88 89
CLASS                : 69
COLON                : 69 69
COMMA                : 14 22 42
CPAREN               : 1 3 4 5 24 52 67 77 87 88 90 91 92
CSQUAREBR            : 46 47
DEC                  : 9 18 39 80 84
DIFFERENT            : 56
DIVIDE               : 66
ELSE                 : 89
END                  : 92
EOF                  : 5 24 35 36 49 50 77 90 91
EQUAL                : 55
FX                   : 4 5
GREATERTHAN          : 57
GREATERTHANEQ        : 58
ID                   : 1 4 5 5 13 14 21 22 24 43 46 48 52 69 77 77 82 86 90 92
IF                   : 88
INPUT                : 90
INT                  : 7 16 37 78 83
LESSTHAN             : 59
LESSTHANEQ           : 60
MAIN                 : 3
METHODS              : 69
MINUS                : 63
MONEY                : 77
MULTIPLY             : 65
OBRACKET             : 3 4 5 69 87 88 89
OPAREN               : 1 3 4 5 24 52 67 77 87 88 90 91 92
OSQUAREBR            : 46 47
OUTPUT               : 91
PLUS                 : 62
RETURN               : 5
STRING               : 8 17 38 79 85
VAR                  : 35 36
VOID                 : 4
WHILE                : 87
error                : 

Nonterminals, with rules where they appear

arrDef               : 44 47
assignmentDef        : 28
begin                : 0
body                 : 3 4 5 25 26 87 88 89
classCall            : 34 51
classDef             : 1 69
end                  : 1
epsilon              : 6 15 23 27 70
expAssignment        : 48
expParen             : 64 65 66
expRelational        : 49 54 67 87 88 91
fxDef                : 1 4 5 69
fxType               : 5
ifCond               : 33 89
input                : 29
main                 : 1
matrixDef            : 45
multDiv              : 61 62 63 65 66
objType              : 35
opRelational         : 54
output               : 30
param                : 4 5 14
paramCall            : 22 24 52 77
paramType            : 13 14
plusMinus            : 53 54 62 63
pointAtt             : 69 72
pointClass           : 69
pointClassName       : 69
pointFx              : 4 5
pointFxId            : 4 5
pointMain            : 3
pointParam           : 13 14
pointScopeClass      : 69
pointScopeClass2     : 69
returnCall           : 50
simpleType           : 
statements           : 26
var                  : 35 36 42
varCte               : 46 47 68
varSimpleType        : 36
varsDef              : 25 71 72
varsType             : 41 42
voidCall             : 31
whileCycle           : 32

Parsing method: LALR

state 0

    (0) S' -> . begin
    (1) begin -> . BEGIN OPAREN ID CPAREN classDef fxDef main end

    BEGIN           shift and go to state 2

    begin                          shift and go to state 1

state 1

    (0) S' -> begin .



state 2

    (1) begin -> BEGIN . OPAREN ID CPAREN classDef fxDef main end

    OPAREN          shift and go to state 3


state 3

    (1) begin -> BEGIN OPAREN . ID CPAREN classDef fxDef main end

    ID              shift and go to state 4


state 4

    (1) begin -> BEGIN OPAREN ID . CPAREN classDef fxDef main end

    CPAREN          shift and go to state 5


state 5

    (1) begin -> BEGIN OPAREN ID CPAREN . classDef fxDef main end
    (69) classDef -> . CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (70) classDef -> . epsilon
    (93) epsilon -> .

    CLASS           shift and go to state 7
    VOID            reduce using rule 93 (epsilon -> .)
    INT             reduce using rule 93 (epsilon -> .)
    STRING          reduce using rule 93 (epsilon -> .)
    DEC             reduce using rule 93 (epsilon -> .)
    BOOL            reduce using rule 93 (epsilon -> .)
    MAIN            reduce using rule 93 (epsilon -> .)

    classDef                       shift and go to state 6
    epsilon                        shift and go to state 8

state 6

    (1) begin -> BEGIN OPAREN ID CPAREN classDef . fxDef main end
    (4) fxDef -> . VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (5) fxDef -> . fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (6) fxDef -> . epsilon
    (7) fxType -> . INT
    (8) fxType -> . STRING
    (9) fxType -> . DEC
    (10) fxType -> . BOOL
    (93) epsilon -> .

    VOID            shift and go to state 10
    INT             shift and go to state 13
    STRING          shift and go to state 14
    DEC             shift and go to state 15
    BOOL            shift and go to state 16
    MAIN            reduce using rule 93 (epsilon -> .)

    fxDef                          shift and go to state 9
    fxType                         shift and go to state 11
    epsilon                        shift and go to state 12

state 7

    (69) classDef -> CLASS . pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (76) pointClass -> .

    ID              reduce using rule 76 (pointClass -> .)

    pointClass                     shift and go to state 17

state 8

    (70) classDef -> epsilon .

    VOID            reduce using rule 70 (classDef -> epsilon .)
    INT             reduce using rule 70 (classDef -> epsilon .)
    STRING          reduce using rule 70 (classDef -> epsilon .)
    DEC             reduce using rule 70 (classDef -> epsilon .)
    BOOL            reduce using rule 70 (classDef -> epsilon .)
    MAIN            reduce using rule 70 (classDef -> epsilon .)


state 9

    (1) begin -> BEGIN OPAREN ID CPAREN classDef fxDef . main end
    (3) main -> . MAIN pointMain OPAREN CPAREN OBRACKET body CBRACKET

    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 10

    (4) fxDef -> VOID . FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef

    FX              shift and go to state 20


state 11

    (5) fxDef -> fxType . FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef

    FX              shift and go to state 21


state 12

    (6) fxDef -> epsilon .

    MAIN            reduce using rule 6 (fxDef -> epsilon .)
    CBRACKET        reduce using rule 6 (fxDef -> epsilon .)


state 13

    (7) fxType -> INT .

    FX              reduce using rule 7 (fxType -> INT .)


state 14

    (8) fxType -> STRING .

    FX              reduce using rule 8 (fxType -> STRING .)


state 15

    (9) fxType -> DEC .

    FX              reduce using rule 9 (fxType -> DEC .)


state 16

    (10) fxType -> BOOL .

    FX              reduce using rule 10 (fxType -> BOOL .)


state 17

    (69) classDef -> CLASS pointClass . ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    ID              shift and go to state 22


state 18

    (1) begin -> BEGIN OPAREN ID CPAREN classDef fxDef main . end
    (92) end -> . END OPAREN ID CPAREN

    END             shift and go to state 24

    end                            shift and go to state 23

state 19

    (3) main -> MAIN . pointMain OPAREN CPAREN OBRACKET body CBRACKET
    (2) pointMain -> .

    OPAREN          reduce using rule 2 (pointMain -> .)

    pointMain                      shift and go to state 25

state 20

    (4) fxDef -> VOID FX . pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (11) pointFx -> .

    ID              reduce using rule 11 (pointFx -> .)

    pointFx                        shift and go to state 26

state 21

    (5) fxDef -> fxType FX . pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (11) pointFx -> .

    ID              reduce using rule 11 (pointFx -> .)

    pointFx                        shift and go to state 27

state 22

    (69) classDef -> CLASS pointClass ID . pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (75) pointClassName -> .

    OBRACKET        reduce using rule 75 (pointClassName -> .)

    pointClassName                 shift and go to state 28

state 23

    (1) begin -> BEGIN OPAREN ID CPAREN classDef fxDef main end .

    $end            reduce using rule 1 (begin -> BEGIN OPAREN ID CPAREN classDef fxDef main end .)


state 24

    (92) end -> END . OPAREN ID CPAREN

    OPAREN          shift and go to state 29


state 25

    (3) main -> MAIN pointMain . OPAREN CPAREN OBRACKET body CBRACKET

    OPAREN          shift and go to state 30


state 26

    (4) fxDef -> VOID FX pointFx . ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef

    ID              shift and go to state 31


state 27

    (5) fxDef -> fxType FX pointFx . ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef

    ID              shift and go to state 32


state 28

    (69) classDef -> CLASS pointClass ID pointClassName . OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    OBRACKET        shift and go to state 33


state 29

    (92) end -> END OPAREN . ID CPAREN

    ID              shift and go to state 34


state 30

    (3) main -> MAIN pointMain OPAREN . CPAREN OBRACKET body CBRACKET

    CPAREN          shift and go to state 35


state 31

    (4) fxDef -> VOID FX pointFx ID . pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (12) pointFxId -> .

    OPAREN          reduce using rule 12 (pointFxId -> .)

    pointFxId                      shift and go to state 36

state 32

    (5) fxDef -> fxType FX pointFx ID . pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (12) pointFxId -> .

    OPAREN          reduce using rule 12 (pointFxId -> .)

    pointFxId                      shift and go to state 37

state 33

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET . ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    ATTRIBUTES      shift and go to state 38


state 34

    (92) end -> END OPAREN ID . CPAREN

    CPAREN          shift and go to state 39


state 35

    (3) main -> MAIN pointMain OPAREN CPAREN . OBRACKET body CBRACKET

    OBRACKET        shift and go to state 40


state 36

    (4) fxDef -> VOID FX pointFx ID pointFxId . OPAREN param CPAREN OBRACKET body CBRACKET fxDef

    OPAREN          shift and go to state 41


state 37

    (5) fxDef -> fxType FX pointFx ID pointFxId . OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef

    OPAREN          shift and go to state 42


state 38

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES . COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    COLON           shift and go to state 43


state 39

    (92) end -> END OPAREN ID CPAREN .

    $end            reduce using rule 92 (end -> END OPAREN ID CPAREN .)


state 40

    (3) main -> MAIN pointMain OPAREN CPAREN OBRACKET . body CBRACKET
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (93) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT expAssignment
    (90) input -> . INPUT OPAREN ID CPAREN EOF
    (91) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (87) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (88) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (89) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (77) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 93 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    body                           shift and go to state 44
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 41

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN . param CPAREN OBRACKET body CBRACKET fxDef
    (13) param -> . paramType ID pointParam
    (14) param -> . paramType ID pointParam COMMA param
    (15) param -> . epsilon
    (16) paramType -> . INT
    (17) paramType -> . STRING
    (18) paramType -> . DEC
    (19) paramType -> . BOOL
    (93) epsilon -> .

    INT             shift and go to state 64
    STRING          shift and go to state 65
    DEC             shift and go to state 66
    BOOL            shift and go to state 67
    CPAREN          reduce using rule 93 (epsilon -> .)

    param                          shift and go to state 61
    paramType                      shift and go to state 62
    epsilon                        shift and go to state 63

state 42

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN . param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (13) param -> . paramType ID pointParam
    (14) param -> . paramType ID pointParam COMMA param
    (15) param -> . epsilon
    (16) paramType -> . INT
    (17) paramType -> . STRING
    (18) paramType -> . DEC
    (19) paramType -> . BOOL
    (93) epsilon -> .

    INT             shift and go to state 64
    STRING          shift and go to state 65
    DEC             shift and go to state 66
    BOOL            shift and go to state 67
    CPAREN          reduce using rule 93 (epsilon -> .)

    param                          shift and go to state 68
    paramType                      shift and go to state 62
    epsilon                        shift and go to state 63

state 43

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON . pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (71) pointAtt -> . varsDef
    (72) pointAtt -> . varsDef pointAtt
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF

    VAR             shift and go to state 48

    pointAtt                       shift and go to state 69
    varsDef                        shift and go to state 70

state 44

    (3) main -> MAIN pointMain OPAREN CPAREN OBRACKET body . CBRACKET

    CBRACKET        shift and go to state 71


state 45

    (25) body -> varsDef . body
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (93) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT expAssignment
    (90) input -> . INPUT OPAREN ID CPAREN EOF
    (91) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (87) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (88) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (89) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (77) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 93 (epsilon -> .)
    RETURN          reduce using rule 93 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    varsDef                        shift and go to state 45
    body                           shift and go to state 72
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 46

    (26) body -> statements . body
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (93) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT expAssignment
    (90) input -> . INPUT OPAREN ID CPAREN EOF
    (91) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (87) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (88) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (89) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (77) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 93 (epsilon -> .)
    RETURN          reduce using rule 93 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    statements                     shift and go to state 46
    body                           shift and go to state 73
    varsDef                        shift and go to state 45
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 47

    (27) body -> epsilon .

    CBRACKET        reduce using rule 27 (body -> epsilon .)
    RETURN          reduce using rule 27 (body -> epsilon .)


state 48

    (35) varsDef -> VAR . objType var EOF
    (36) varsDef -> VAR . varSimpleType var EOF
    (82) objType -> . ID
    (37) varSimpleType -> . INT
    (38) varSimpleType -> . STRING
    (39) varSimpleType -> . DEC
    (40) varSimpleType -> . BOOL

    ID              shift and go to state 76
    INT             shift and go to state 77
    STRING          shift and go to state 78
    DEC             shift and go to state 79
    BOOL            shift and go to state 80

    objType                        shift and go to state 74
    varSimpleType                  shift and go to state 75

state 49

    (28) statements -> assignmentDef .

    VAR             reduce using rule 28 (statements -> assignmentDef .)
    ID              reduce using rule 28 (statements -> assignmentDef .)
    INPUT           reduce using rule 28 (statements -> assignmentDef .)
    OUTPUT          reduce using rule 28 (statements -> assignmentDef .)
    WHILE           reduce using rule 28 (statements -> assignmentDef .)
    IF              reduce using rule 28 (statements -> assignmentDef .)
    CBRACKET        reduce using rule 28 (statements -> assignmentDef .)
    RETURN          reduce using rule 28 (statements -> assignmentDef .)


state 50

    (29) statements -> input .

    VAR             reduce using rule 29 (statements -> input .)
    ID              reduce using rule 29 (statements -> input .)
    INPUT           reduce using rule 29 (statements -> input .)
    OUTPUT          reduce using rule 29 (statements -> input .)
    WHILE           reduce using rule 29 (statements -> input .)
    IF              reduce using rule 29 (statements -> input .)
    CBRACKET        reduce using rule 29 (statements -> input .)
    RETURN          reduce using rule 29 (statements -> input .)


state 51

    (30) statements -> output .

    VAR             reduce using rule 30 (statements -> output .)
    ID              reduce using rule 30 (statements -> output .)
    INPUT           reduce using rule 30 (statements -> output .)
    OUTPUT          reduce using rule 30 (statements -> output .)
    WHILE           reduce using rule 30 (statements -> output .)
    IF              reduce using rule 30 (statements -> output .)
    CBRACKET        reduce using rule 30 (statements -> output .)
    RETURN          reduce using rule 30 (statements -> output .)


state 52

    (31) statements -> voidCall .

    VAR             reduce using rule 31 (statements -> voidCall .)
    ID              reduce using rule 31 (statements -> voidCall .)
    INPUT           reduce using rule 31 (statements -> voidCall .)
    OUTPUT          reduce using rule 31 (statements -> voidCall .)
    WHILE           reduce using rule 31 (statements -> voidCall .)
    IF              reduce using rule 31 (statements -> voidCall .)
    CBRACKET        reduce using rule 31 (statements -> voidCall .)
    RETURN          reduce using rule 31 (statements -> voidCall .)


state 53

    (32) statements -> whileCycle .

    VAR             reduce using rule 32 (statements -> whileCycle .)
    ID              reduce using rule 32 (statements -> whileCycle .)
    INPUT           reduce using rule 32 (statements -> whileCycle .)
    OUTPUT          reduce using rule 32 (statements -> whileCycle .)
    WHILE           reduce using rule 32 (statements -> whileCycle .)
    IF              reduce using rule 32 (statements -> whileCycle .)
    CBRACKET        reduce using rule 32 (statements -> whileCycle .)
    RETURN          reduce using rule 32 (statements -> whileCycle .)


state 54

    (33) statements -> ifCond .
    (89) ifCond -> ifCond . ELSE OBRACKET body CBRACKET

    VAR             reduce using rule 33 (statements -> ifCond .)
    ID              reduce using rule 33 (statements -> ifCond .)
    INPUT           reduce using rule 33 (statements -> ifCond .)
    OUTPUT          reduce using rule 33 (statements -> ifCond .)
    WHILE           reduce using rule 33 (statements -> ifCond .)
    IF              reduce using rule 33 (statements -> ifCond .)
    CBRACKET        reduce using rule 33 (statements -> ifCond .)
    RETURN          reduce using rule 33 (statements -> ifCond .)
    ELSE            shift and go to state 81


state 55

    (34) statements -> classCall .

    VAR             reduce using rule 34 (statements -> classCall .)
    ID              reduce using rule 34 (statements -> classCall .)
    INPUT           reduce using rule 34 (statements -> classCall .)
    OUTPUT          reduce using rule 34 (statements -> classCall .)
    WHILE           reduce using rule 34 (statements -> classCall .)
    IF              reduce using rule 34 (statements -> classCall .)
    CBRACKET        reduce using rule 34 (statements -> classCall .)
    RETURN          reduce using rule 34 (statements -> classCall .)


state 56

    (48) assignmentDef -> ID . ASSIGNMENT expAssignment
    (24) voidCall -> ID . OPAREN paramCall CPAREN EOF
    (77) classCall -> ID . MONEY ID OPAREN paramCall CPAREN EOF

    ASSIGNMENT      shift and go to state 82
    OPAREN          shift and go to state 83
    MONEY           shift and go to state 84


state 57

    (90) input -> INPUT . OPAREN ID CPAREN EOF

    OPAREN          shift and go to state 85


state 58

    (91) output -> OUTPUT . OPAREN expRelational CPAREN EOF

    OPAREN          shift and go to state 86


state 59

    (87) whileCycle -> WHILE . OPAREN expRelational CPAREN OBRACKET body CBRACKET

    OPAREN          shift and go to state 87


state 60

    (88) ifCond -> IF . OPAREN expRelational CPAREN OBRACKET body CBRACKET

    OPAREN          shift and go to state 88


state 61

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param . CPAREN OBRACKET body CBRACKET fxDef

    CPAREN          shift and go to state 89


state 62

    (13) param -> paramType . ID pointParam
    (14) param -> paramType . ID pointParam COMMA param

    ID              shift and go to state 90


state 63

    (15) param -> epsilon .

    CPAREN          reduce using rule 15 (param -> epsilon .)


state 64

    (16) paramType -> INT .

    ID              reduce using rule 16 (paramType -> INT .)


state 65

    (17) paramType -> STRING .

    ID              reduce using rule 17 (paramType -> STRING .)


state 66

    (18) paramType -> DEC .

    ID              reduce using rule 18 (paramType -> DEC .)


state 67

    (19) paramType -> BOOL .

    ID              reduce using rule 19 (paramType -> BOOL .)


state 68

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param . CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef

    CPAREN          shift and go to state 91


state 69

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt . METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    METHODS         shift and go to state 92


state 70

    (71) pointAtt -> varsDef .
    (72) pointAtt -> varsDef . pointAtt
    (71) pointAtt -> . varsDef
    (72) pointAtt -> . varsDef pointAtt
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF

    METHODS         reduce using rule 71 (pointAtt -> varsDef .)
    VAR             shift and go to state 48

    varsDef                        shift and go to state 70
    pointAtt                       shift and go to state 93

state 71

    (3) main -> MAIN pointMain OPAREN CPAREN OBRACKET body CBRACKET .

    END             reduce using rule 3 (main -> MAIN pointMain OPAREN CPAREN OBRACKET body CBRACKET .)


state 72

    (25) body -> varsDef body .

    CBRACKET        reduce using rule 25 (body -> varsDef body .)
    RETURN          reduce using rule 25 (body -> varsDef body .)


state 73

    (26) body -> statements body .

    CBRACKET        reduce using rule 26 (body -> statements body .)
    RETURN          reduce using rule 26 (body -> statements body .)


state 74

    (35) varsDef -> VAR objType . var EOF
    (41) var -> . varsType
    (42) var -> . varsType COMMA var
    (43) varsType -> . ID
    (44) varsType -> . arrDef
    (45) varsType -> . matrixDef
    (46) arrDef -> . ID OSQUAREBR varCte CSQUAREBR
    (47) matrixDef -> . arrDef OSQUAREBR varCte CSQUAREBR

    ID              shift and go to state 96

    var                            shift and go to state 94
    varsType                       shift and go to state 95
    arrDef                         shift and go to state 97
    matrixDef                      shift and go to state 98

state 75

    (36) varsDef -> VAR varSimpleType . var EOF
    (41) var -> . varsType
    (42) var -> . varsType COMMA var
    (43) varsType -> . ID
    (44) varsType -> . arrDef
    (45) varsType -> . matrixDef
    (46) arrDef -> . ID OSQUAREBR varCte CSQUAREBR
    (47) matrixDef -> . arrDef OSQUAREBR varCte CSQUAREBR

    ID              shift and go to state 96

    var                            shift and go to state 99
    varsType                       shift and go to state 95
    arrDef                         shift and go to state 97
    matrixDef                      shift and go to state 98

state 76

    (82) objType -> ID .

    ID              reduce using rule 82 (objType -> ID .)


state 77

    (37) varSimpleType -> INT .

    ID              reduce using rule 37 (varSimpleType -> INT .)


state 78

    (38) varSimpleType -> STRING .

    ID              reduce using rule 38 (varSimpleType -> STRING .)


state 79

    (39) varSimpleType -> DEC .

    ID              reduce using rule 39 (varSimpleType -> DEC .)


state 80

    (40) varSimpleType -> BOOL .

    ID              reduce using rule 40 (varSimpleType -> BOOL .)


state 81

    (89) ifCond -> ifCond ELSE . OBRACKET body CBRACKET

    OBRACKET        shift and go to state 100


state 82

    (48) assignmentDef -> ID ASSIGNMENT . expAssignment
    (49) expAssignment -> . expRelational EOF
    (50) expAssignment -> . returnCall EOF
    (51) expAssignment -> . classCall
    (53) expRelational -> . plusMinus
    (54) expRelational -> . plusMinus opRelational expRelational
    (52) returnCall -> . ID OPAREN paramCall CPAREN
    (77) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF
    (61) plusMinus -> . multDiv
    (62) plusMinus -> . multDiv PLUS plusMinus
    (63) plusMinus -> . multDiv MINUS plusMinus
    (64) multDiv -> . expParen
    (65) multDiv -> . expParen MULTIPLY multDiv
    (66) multDiv -> . expParen DIVIDE multDiv
    (67) expParen -> . OPAREN expRelational CPAREN
    (68) expParen -> . varCte
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    ID              shift and go to state 101
    OPAREN          shift and go to state 107
    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113

    expAssignment                  shift and go to state 102
    expRelational                  shift and go to state 103
    returnCall                     shift and go to state 104
    classCall                      shift and go to state 105
    plusMinus                      shift and go to state 106
    multDiv                        shift and go to state 108
    expParen                       shift and go to state 109
    varCte                         shift and go to state 110

state 83

    (24) voidCall -> ID OPAREN . paramCall CPAREN EOF
    (21) paramCall -> . ID
    (22) paramCall -> . ID COMMA paramCall
    (23) paramCall -> . epsilon
    (93) epsilon -> .

    ID              shift and go to state 114
    CPAREN          reduce using rule 93 (epsilon -> .)

    paramCall                      shift and go to state 115
    epsilon                        shift and go to state 116

state 84

    (77) classCall -> ID MONEY . ID OPAREN paramCall CPAREN EOF

    ID              shift and go to state 117


state 85

    (90) input -> INPUT OPAREN . ID CPAREN EOF

    ID              shift and go to state 118


state 86

    (91) output -> OUTPUT OPAREN . expRelational CPAREN EOF
    (53) expRelational -> . plusMinus
    (54) expRelational -> . plusMinus opRelational expRelational
    (61) plusMinus -> . multDiv
    (62) plusMinus -> . multDiv PLUS plusMinus
    (63) plusMinus -> . multDiv MINUS plusMinus
    (64) multDiv -> . expParen
    (65) multDiv -> . expParen MULTIPLY multDiv
    (66) multDiv -> . expParen DIVIDE multDiv
    (67) expParen -> . OPAREN expRelational CPAREN
    (68) expParen -> . varCte
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    expRelational                  shift and go to state 119
    plusMinus                      shift and go to state 106
    multDiv                        shift and go to state 108
    expParen                       shift and go to state 109
    varCte                         shift and go to state 110

state 87

    (87) whileCycle -> WHILE OPAREN . expRelational CPAREN OBRACKET body CBRACKET
    (53) expRelational -> . plusMinus
    (54) expRelational -> . plusMinus opRelational expRelational
    (61) plusMinus -> . multDiv
    (62) plusMinus -> . multDiv PLUS plusMinus
    (63) plusMinus -> . multDiv MINUS plusMinus
    (64) multDiv -> . expParen
    (65) multDiv -> . expParen MULTIPLY multDiv
    (66) multDiv -> . expParen DIVIDE multDiv
    (67) expParen -> . OPAREN expRelational CPAREN
    (68) expParen -> . varCte
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    expRelational                  shift and go to state 121
    plusMinus                      shift and go to state 106
    multDiv                        shift and go to state 108
    expParen                       shift and go to state 109
    varCte                         shift and go to state 110

state 88

    (88) ifCond -> IF OPAREN . expRelational CPAREN OBRACKET body CBRACKET
    (53) expRelational -> . plusMinus
    (54) expRelational -> . plusMinus opRelational expRelational
    (61) plusMinus -> . multDiv
    (62) plusMinus -> . multDiv PLUS plusMinus
    (63) plusMinus -> . multDiv MINUS plusMinus
    (64) multDiv -> . expParen
    (65) multDiv -> . expParen MULTIPLY multDiv
    (66) multDiv -> . expParen DIVIDE multDiv
    (67) expParen -> . OPAREN expRelational CPAREN
    (68) expParen -> . varCte
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    expRelational                  shift and go to state 122
    plusMinus                      shift and go to state 106
    multDiv                        shift and go to state 108
    expParen                       shift and go to state 109
    varCte                         shift and go to state 110

state 89

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN . OBRACKET body CBRACKET fxDef

    OBRACKET        shift and go to state 123


state 90

    (13) param -> paramType ID . pointParam
    (14) param -> paramType ID . pointParam COMMA param
    (20) pointParam -> .

    COMMA           reduce using rule 20 (pointParam -> .)
    CPAREN          reduce using rule 20 (pointParam -> .)

    pointParam                     shift and go to state 124

state 91

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN . OBRACKET body RETURN ID EOF CBRACKET fxDef

    OBRACKET        shift and go to state 125


state 92

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS . COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    COLON           shift and go to state 126


state 93

    (72) pointAtt -> varsDef pointAtt .

    METHODS         reduce using rule 72 (pointAtt -> varsDef pointAtt .)


state 94

    (35) varsDef -> VAR objType var . EOF

    EOF             shift and go to state 127


state 95

    (41) var -> varsType .
    (42) var -> varsType . COMMA var

    EOF             reduce using rule 41 (var -> varsType .)
    COMMA           shift and go to state 128


state 96

    (43) varsType -> ID .
    (46) arrDef -> ID . OSQUAREBR varCte CSQUAREBR

    COMMA           reduce using rule 43 (varsType -> ID .)
    EOF             reduce using rule 43 (varsType -> ID .)
    OSQUAREBR       shift and go to state 129


state 97

    (44) varsType -> arrDef .
    (47) matrixDef -> arrDef . OSQUAREBR varCte CSQUAREBR

    COMMA           reduce using rule 44 (varsType -> arrDef .)
    EOF             reduce using rule 44 (varsType -> arrDef .)
    OSQUAREBR       shift and go to state 130


state 98

    (45) varsType -> matrixDef .

    COMMA           reduce using rule 45 (varsType -> matrixDef .)
    EOF             reduce using rule 45 (varsType -> matrixDef .)


state 99

    (36) varsDef -> VAR varSimpleType var . EOF

    EOF             shift and go to state 131


state 100

    (89) ifCond -> ifCond ELSE OBRACKET . body CBRACKET
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (93) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT expAssignment
    (90) input -> . INPUT OPAREN ID CPAREN EOF
    (91) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (87) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (88) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (89) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (77) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 93 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    ifCond                         shift and go to state 54
    body                           shift and go to state 132
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    classCall                      shift and go to state 55

state 101

    (52) returnCall -> ID . OPAREN paramCall CPAREN
    (77) classCall -> ID . MONEY ID OPAREN paramCall CPAREN EOF
    (86) varCte -> ID .

    OPAREN          shift and go to state 133
    MONEY           shift and go to state 84
    MULTIPLY        reduce using rule 86 (varCte -> ID .)
    DIVIDE          reduce using rule 86 (varCte -> ID .)
    PLUS            reduce using rule 86 (varCte -> ID .)
    MINUS           reduce using rule 86 (varCte -> ID .)
    EQUAL           reduce using rule 86 (varCte -> ID .)
    DIFFERENT       reduce using rule 86 (varCte -> ID .)
    GREATERTHAN     reduce using rule 86 (varCte -> ID .)
    GREATERTHANEQ   reduce using rule 86 (varCte -> ID .)
    LESSTHAN        reduce using rule 86 (varCte -> ID .)
    LESSTHANEQ      reduce using rule 86 (varCte -> ID .)
    EOF             reduce using rule 86 (varCte -> ID .)


state 102

    (48) assignmentDef -> ID ASSIGNMENT expAssignment .

    VAR             reduce using rule 48 (assignmentDef -> ID ASSIGNMENT expAssignment .)
    ID              reduce using rule 48 (assignmentDef -> ID ASSIGNMENT expAssignment .)
    INPUT           reduce using rule 48 (assignmentDef -> ID ASSIGNMENT expAssignment .)
    OUTPUT          reduce using rule 48 (assignmentDef -> ID ASSIGNMENT expAssignment .)
    WHILE           reduce using rule 48 (assignmentDef -> ID ASSIGNMENT expAssignment .)
    IF              reduce using rule 48 (assignmentDef -> ID ASSIGNMENT expAssignment .)
    CBRACKET        reduce using rule 48 (assignmentDef -> ID ASSIGNMENT expAssignment .)
    RETURN          reduce using rule 48 (assignmentDef -> ID ASSIGNMENT expAssignment .)


state 103

    (49) expAssignment -> expRelational . EOF

    EOF             shift and go to state 134


state 104

    (50) expAssignment -> returnCall . EOF

    EOF             shift and go to state 135


state 105

    (51) expAssignment -> classCall .

    VAR             reduce using rule 51 (expAssignment -> classCall .)
    ID              reduce using rule 51 (expAssignment -> classCall .)
    INPUT           reduce using rule 51 (expAssignment -> classCall .)
    OUTPUT          reduce using rule 51 (expAssignment -> classCall .)
    WHILE           reduce using rule 51 (expAssignment -> classCall .)
    IF              reduce using rule 51 (expAssignment -> classCall .)
    CBRACKET        reduce using rule 51 (expAssignment -> classCall .)
    RETURN          reduce using rule 51 (expAssignment -> classCall .)


state 106

    (53) expRelational -> plusMinus .
    (54) expRelational -> plusMinus . opRelational expRelational
    (55) opRelational -> . EQUAL
    (56) opRelational -> . DIFFERENT
    (57) opRelational -> . GREATERTHAN
    (58) opRelational -> . GREATERTHANEQ
    (59) opRelational -> . LESSTHAN
    (60) opRelational -> . LESSTHANEQ

    EOF             reduce using rule 53 (expRelational -> plusMinus .)
    CPAREN          reduce using rule 53 (expRelational -> plusMinus .)
    EQUAL           shift and go to state 137
    DIFFERENT       shift and go to state 138
    GREATERTHAN     shift and go to state 139
    GREATERTHANEQ   shift and go to state 140
    LESSTHAN        shift and go to state 141
    LESSTHANEQ      shift and go to state 142

    opRelational                   shift and go to state 136

state 107

    (67) expParen -> OPAREN . expRelational CPAREN
    (53) expRelational -> . plusMinus
    (54) expRelational -> . plusMinus opRelational expRelational
    (61) plusMinus -> . multDiv
    (62) plusMinus -> . multDiv PLUS plusMinus
    (63) plusMinus -> . multDiv MINUS plusMinus
    (64) multDiv -> . expParen
    (65) multDiv -> . expParen MULTIPLY multDiv
    (66) multDiv -> . expParen DIVIDE multDiv
    (67) expParen -> . OPAREN expRelational CPAREN
    (68) expParen -> . varCte
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    expRelational                  shift and go to state 143
    plusMinus                      shift and go to state 106
    multDiv                        shift and go to state 108
    expParen                       shift and go to state 109
    varCte                         shift and go to state 110

state 108

    (61) plusMinus -> multDiv .
    (62) plusMinus -> multDiv . PLUS plusMinus
    (63) plusMinus -> multDiv . MINUS plusMinus

    EQUAL           reduce using rule 61 (plusMinus -> multDiv .)
    DIFFERENT       reduce using rule 61 (plusMinus -> multDiv .)
    GREATERTHAN     reduce using rule 61 (plusMinus -> multDiv .)
    GREATERTHANEQ   reduce using rule 61 (plusMinus -> multDiv .)
    LESSTHAN        reduce using rule 61 (plusMinus -> multDiv .)
    LESSTHANEQ      reduce using rule 61 (plusMinus -> multDiv .)
    EOF             reduce using rule 61 (plusMinus -> multDiv .)
    CPAREN          reduce using rule 61 (plusMinus -> multDiv .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145


state 109

    (64) multDiv -> expParen .
    (65) multDiv -> expParen . MULTIPLY multDiv
    (66) multDiv -> expParen . DIVIDE multDiv

    PLUS            reduce using rule 64 (multDiv -> expParen .)
    MINUS           reduce using rule 64 (multDiv -> expParen .)
    EQUAL           reduce using rule 64 (multDiv -> expParen .)
    DIFFERENT       reduce using rule 64 (multDiv -> expParen .)
    GREATERTHAN     reduce using rule 64 (multDiv -> expParen .)
    GREATERTHANEQ   reduce using rule 64 (multDiv -> expParen .)
    LESSTHAN        reduce using rule 64 (multDiv -> expParen .)
    LESSTHANEQ      reduce using rule 64 (multDiv -> expParen .)
    EOF             reduce using rule 64 (multDiv -> expParen .)
    CPAREN          reduce using rule 64 (multDiv -> expParen .)
    MULTIPLY        shift and go to state 146
    DIVIDE          shift and go to state 147


state 110

    (68) expParen -> varCte .

    MULTIPLY        reduce using rule 68 (expParen -> varCte .)
    DIVIDE          reduce using rule 68 (expParen -> varCte .)
    PLUS            reduce using rule 68 (expParen -> varCte .)
    MINUS           reduce using rule 68 (expParen -> varCte .)
    EQUAL           reduce using rule 68 (expParen -> varCte .)
    DIFFERENT       reduce using rule 68 (expParen -> varCte .)
    GREATERTHAN     reduce using rule 68 (expParen -> varCte .)
    GREATERTHANEQ   reduce using rule 68 (expParen -> varCte .)
    LESSTHAN        reduce using rule 68 (expParen -> varCte .)
    LESSTHANEQ      reduce using rule 68 (expParen -> varCte .)
    EOF             reduce using rule 68 (expParen -> varCte .)
    CPAREN          reduce using rule 68 (expParen -> varCte .)


state 111

    (83) varCte -> INT .

    MULTIPLY        reduce using rule 83 (varCte -> INT .)
    DIVIDE          reduce using rule 83 (varCte -> INT .)
    PLUS            reduce using rule 83 (varCte -> INT .)
    MINUS           reduce using rule 83 (varCte -> INT .)
    EQUAL           reduce using rule 83 (varCte -> INT .)
    DIFFERENT       reduce using rule 83 (varCte -> INT .)
    GREATERTHAN     reduce using rule 83 (varCte -> INT .)
    GREATERTHANEQ   reduce using rule 83 (varCte -> INT .)
    LESSTHAN        reduce using rule 83 (varCte -> INT .)
    LESSTHANEQ      reduce using rule 83 (varCte -> INT .)
    EOF             reduce using rule 83 (varCte -> INT .)
    CPAREN          reduce using rule 83 (varCte -> INT .)
    CSQUAREBR       reduce using rule 83 (varCte -> INT .)


state 112

    (84) varCte -> DEC .

    MULTIPLY        reduce using rule 84 (varCte -> DEC .)
    DIVIDE          reduce using rule 84 (varCte -> DEC .)
    PLUS            reduce using rule 84 (varCte -> DEC .)
    MINUS           reduce using rule 84 (varCte -> DEC .)
    EQUAL           reduce using rule 84 (varCte -> DEC .)
    DIFFERENT       reduce using rule 84 (varCte -> DEC .)
    GREATERTHAN     reduce using rule 84 (varCte -> DEC .)
    GREATERTHANEQ   reduce using rule 84 (varCte -> DEC .)
    LESSTHAN        reduce using rule 84 (varCte -> DEC .)
    LESSTHANEQ      reduce using rule 84 (varCte -> DEC .)
    EOF             reduce using rule 84 (varCte -> DEC .)
    CPAREN          reduce using rule 84 (varCte -> DEC .)
    CSQUAREBR       reduce using rule 84 (varCte -> DEC .)


state 113

    (85) varCte -> STRING .

    MULTIPLY        reduce using rule 85 (varCte -> STRING .)
    DIVIDE          reduce using rule 85 (varCte -> STRING .)
    PLUS            reduce using rule 85 (varCte -> STRING .)
    MINUS           reduce using rule 85 (varCte -> STRING .)
    EQUAL           reduce using rule 85 (varCte -> STRING .)
    DIFFERENT       reduce using rule 85 (varCte -> STRING .)
    GREATERTHAN     reduce using rule 85 (varCte -> STRING .)
    GREATERTHANEQ   reduce using rule 85 (varCte -> STRING .)
    LESSTHAN        reduce using rule 85 (varCte -> STRING .)
    LESSTHANEQ      reduce using rule 85 (varCte -> STRING .)
    EOF             reduce using rule 85 (varCte -> STRING .)
    CPAREN          reduce using rule 85 (varCte -> STRING .)
    CSQUAREBR       reduce using rule 85 (varCte -> STRING .)


state 114

    (21) paramCall -> ID .
    (22) paramCall -> ID . COMMA paramCall

    CPAREN          reduce using rule 21 (paramCall -> ID .)
    COMMA           shift and go to state 148


state 115

    (24) voidCall -> ID OPAREN paramCall . CPAREN EOF

    CPAREN          shift and go to state 149


state 116

    (23) paramCall -> epsilon .

    CPAREN          reduce using rule 23 (paramCall -> epsilon .)


state 117

    (77) classCall -> ID MONEY ID . OPAREN paramCall CPAREN EOF

    OPAREN          shift and go to state 150


state 118

    (90) input -> INPUT OPAREN ID . CPAREN EOF

    CPAREN          shift and go to state 151


state 119

    (91) output -> OUTPUT OPAREN expRelational . CPAREN EOF

    CPAREN          shift and go to state 152


state 120

    (86) varCte -> ID .

    MULTIPLY        reduce using rule 86 (varCte -> ID .)
    DIVIDE          reduce using rule 86 (varCte -> ID .)
    PLUS            reduce using rule 86 (varCte -> ID .)
    MINUS           reduce using rule 86 (varCte -> ID .)
    EQUAL           reduce using rule 86 (varCte -> ID .)
    DIFFERENT       reduce using rule 86 (varCte -> ID .)
    GREATERTHAN     reduce using rule 86 (varCte -> ID .)
    GREATERTHANEQ   reduce using rule 86 (varCte -> ID .)
    LESSTHAN        reduce using rule 86 (varCte -> ID .)
    LESSTHANEQ      reduce using rule 86 (varCte -> ID .)
    CPAREN          reduce using rule 86 (varCte -> ID .)
    CSQUAREBR       reduce using rule 86 (varCte -> ID .)
    EOF             reduce using rule 86 (varCte -> ID .)


state 121

    (87) whileCycle -> WHILE OPAREN expRelational . CPAREN OBRACKET body CBRACKET

    CPAREN          shift and go to state 153


state 122

    (88) ifCond -> IF OPAREN expRelational . CPAREN OBRACKET body CBRACKET

    CPAREN          shift and go to state 154


state 123

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET . body CBRACKET fxDef
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (93) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT expAssignment
    (90) input -> . INPUT OPAREN ID CPAREN EOF
    (91) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (87) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (88) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (89) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (77) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 93 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    body                           shift and go to state 155
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 124

    (13) param -> paramType ID pointParam .
    (14) param -> paramType ID pointParam . COMMA param

    CPAREN          reduce using rule 13 (param -> paramType ID pointParam .)
    COMMA           shift and go to state 156


state 125

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET . body RETURN ID EOF CBRACKET fxDef
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (93) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT expAssignment
    (90) input -> . INPUT OPAREN ID CPAREN EOF
    (91) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (87) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (88) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (89) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (77) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    RETURN          reduce using rule 93 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    body                           shift and go to state 157
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 126

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON . pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (73) pointScopeClass -> .

    VOID            reduce using rule 73 (pointScopeClass -> .)
    INT             reduce using rule 73 (pointScopeClass -> .)
    STRING          reduce using rule 73 (pointScopeClass -> .)
    DEC             reduce using rule 73 (pointScopeClass -> .)
    BOOL            reduce using rule 73 (pointScopeClass -> .)
    CBRACKET        reduce using rule 73 (pointScopeClass -> .)

    pointScopeClass                shift and go to state 158

state 127

    (35) varsDef -> VAR objType var EOF .

    VAR             reduce using rule 35 (varsDef -> VAR objType var EOF .)
    ID              reduce using rule 35 (varsDef -> VAR objType var EOF .)
    INPUT           reduce using rule 35 (varsDef -> VAR objType var EOF .)
    OUTPUT          reduce using rule 35 (varsDef -> VAR objType var EOF .)
    WHILE           reduce using rule 35 (varsDef -> VAR objType var EOF .)
    IF              reduce using rule 35 (varsDef -> VAR objType var EOF .)
    CBRACKET        reduce using rule 35 (varsDef -> VAR objType var EOF .)
    METHODS         reduce using rule 35 (varsDef -> VAR objType var EOF .)
    RETURN          reduce using rule 35 (varsDef -> VAR objType var EOF .)


state 128

    (42) var -> varsType COMMA . var
    (41) var -> . varsType
    (42) var -> . varsType COMMA var
    (43) varsType -> . ID
    (44) varsType -> . arrDef
    (45) varsType -> . matrixDef
    (46) arrDef -> . ID OSQUAREBR varCte CSQUAREBR
    (47) matrixDef -> . arrDef OSQUAREBR varCte CSQUAREBR

    ID              shift and go to state 96

    varsType                       shift and go to state 95
    var                            shift and go to state 159
    arrDef                         shift and go to state 97
    matrixDef                      shift and go to state 98

state 129

    (46) arrDef -> ID OSQUAREBR . varCte CSQUAREBR
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    varCte                         shift and go to state 160

state 130

    (47) matrixDef -> arrDef OSQUAREBR . varCte CSQUAREBR
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    varCte                         shift and go to state 161

state 131

    (36) varsDef -> VAR varSimpleType var EOF .

    VAR             reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    ID              reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    INPUT           reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    OUTPUT          reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    WHILE           reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    IF              reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    CBRACKET        reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    METHODS         reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    RETURN          reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)


state 132

    (89) ifCond -> ifCond ELSE OBRACKET body . CBRACKET

    CBRACKET        shift and go to state 162


state 133

    (52) returnCall -> ID OPAREN . paramCall CPAREN
    (21) paramCall -> . ID
    (22) paramCall -> . ID COMMA paramCall
    (23) paramCall -> . epsilon
    (93) epsilon -> .

    ID              shift and go to state 114
    CPAREN          reduce using rule 93 (epsilon -> .)

    paramCall                      shift and go to state 163
    epsilon                        shift and go to state 116

state 134

    (49) expAssignment -> expRelational EOF .

    VAR             reduce using rule 49 (expAssignment -> expRelational EOF .)
    ID              reduce using rule 49 (expAssignment -> expRelational EOF .)
    INPUT           reduce using rule 49 (expAssignment -> expRelational EOF .)
    OUTPUT          reduce using rule 49 (expAssignment -> expRelational EOF .)
    WHILE           reduce using rule 49 (expAssignment -> expRelational EOF .)
    IF              reduce using rule 49 (expAssignment -> expRelational EOF .)
    CBRACKET        reduce using rule 49 (expAssignment -> expRelational EOF .)
    RETURN          reduce using rule 49 (expAssignment -> expRelational EOF .)


state 135

    (50) expAssignment -> returnCall EOF .

    VAR             reduce using rule 50 (expAssignment -> returnCall EOF .)
    ID              reduce using rule 50 (expAssignment -> returnCall EOF .)
    INPUT           reduce using rule 50 (expAssignment -> returnCall EOF .)
    OUTPUT          reduce using rule 50 (expAssignment -> returnCall EOF .)
    WHILE           reduce using rule 50 (expAssignment -> returnCall EOF .)
    IF              reduce using rule 50 (expAssignment -> returnCall EOF .)
    CBRACKET        reduce using rule 50 (expAssignment -> returnCall EOF .)
    RETURN          reduce using rule 50 (expAssignment -> returnCall EOF .)


state 136

    (54) expRelational -> plusMinus opRelational . expRelational
    (53) expRelational -> . plusMinus
    (54) expRelational -> . plusMinus opRelational expRelational
    (61) plusMinus -> . multDiv
    (62) plusMinus -> . multDiv PLUS plusMinus
    (63) plusMinus -> . multDiv MINUS plusMinus
    (64) multDiv -> . expParen
    (65) multDiv -> . expParen MULTIPLY multDiv
    (66) multDiv -> . expParen DIVIDE multDiv
    (67) expParen -> . OPAREN expRelational CPAREN
    (68) expParen -> . varCte
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    plusMinus                      shift and go to state 106
    expRelational                  shift and go to state 164
    multDiv                        shift and go to state 108
    expParen                       shift and go to state 109
    varCte                         shift and go to state 110

state 137

    (55) opRelational -> EQUAL .

    OPAREN          reduce using rule 55 (opRelational -> EQUAL .)
    INT             reduce using rule 55 (opRelational -> EQUAL .)
    DEC             reduce using rule 55 (opRelational -> EQUAL .)
    STRING          reduce using rule 55 (opRelational -> EQUAL .)
    ID              reduce using rule 55 (opRelational -> EQUAL .)


state 138

    (56) opRelational -> DIFFERENT .

    OPAREN          reduce using rule 56 (opRelational -> DIFFERENT .)
    INT             reduce using rule 56 (opRelational -> DIFFERENT .)
    DEC             reduce using rule 56 (opRelational -> DIFFERENT .)
    STRING          reduce using rule 56 (opRelational -> DIFFERENT .)
    ID              reduce using rule 56 (opRelational -> DIFFERENT .)


state 139

    (57) opRelational -> GREATERTHAN .

    OPAREN          reduce using rule 57 (opRelational -> GREATERTHAN .)
    INT             reduce using rule 57 (opRelational -> GREATERTHAN .)
    DEC             reduce using rule 57 (opRelational -> GREATERTHAN .)
    STRING          reduce using rule 57 (opRelational -> GREATERTHAN .)
    ID              reduce using rule 57 (opRelational -> GREATERTHAN .)


state 140

    (58) opRelational -> GREATERTHANEQ .

    OPAREN          reduce using rule 58 (opRelational -> GREATERTHANEQ .)
    INT             reduce using rule 58 (opRelational -> GREATERTHANEQ .)
    DEC             reduce using rule 58 (opRelational -> GREATERTHANEQ .)
    STRING          reduce using rule 58 (opRelational -> GREATERTHANEQ .)
    ID              reduce using rule 58 (opRelational -> GREATERTHANEQ .)


state 141

    (59) opRelational -> LESSTHAN .

    OPAREN          reduce using rule 59 (opRelational -> LESSTHAN .)
    INT             reduce using rule 59 (opRelational -> LESSTHAN .)
    DEC             reduce using rule 59 (opRelational -> LESSTHAN .)
    STRING          reduce using rule 59 (opRelational -> LESSTHAN .)
    ID              reduce using rule 59 (opRelational -> LESSTHAN .)


state 142

    (60) opRelational -> LESSTHANEQ .

    OPAREN          reduce using rule 60 (opRelational -> LESSTHANEQ .)
    INT             reduce using rule 60 (opRelational -> LESSTHANEQ .)
    DEC             reduce using rule 60 (opRelational -> LESSTHANEQ .)
    STRING          reduce using rule 60 (opRelational -> LESSTHANEQ .)
    ID              reduce using rule 60 (opRelational -> LESSTHANEQ .)


state 143

    (67) expParen -> OPAREN expRelational . CPAREN

    CPAREN          shift and go to state 165


state 144

    (62) plusMinus -> multDiv PLUS . plusMinus
    (61) plusMinus -> . multDiv
    (62) plusMinus -> . multDiv PLUS plusMinus
    (63) plusMinus -> . multDiv MINUS plusMinus
    (64) multDiv -> . expParen
    (65) multDiv -> . expParen MULTIPLY multDiv
    (66) multDiv -> . expParen DIVIDE multDiv
    (67) expParen -> . OPAREN expRelational CPAREN
    (68) expParen -> . varCte
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    multDiv                        shift and go to state 108
    plusMinus                      shift and go to state 166
    expParen                       shift and go to state 109
    varCte                         shift and go to state 110

state 145

    (63) plusMinus -> multDiv MINUS . plusMinus
    (61) plusMinus -> . multDiv
    (62) plusMinus -> . multDiv PLUS plusMinus
    (63) plusMinus -> . multDiv MINUS plusMinus
    (64) multDiv -> . expParen
    (65) multDiv -> . expParen MULTIPLY multDiv
    (66) multDiv -> . expParen DIVIDE multDiv
    (67) expParen -> . OPAREN expRelational CPAREN
    (68) expParen -> . varCte
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    multDiv                        shift and go to state 108
    plusMinus                      shift and go to state 167
    expParen                       shift and go to state 109
    varCte                         shift and go to state 110

state 146

    (65) multDiv -> expParen MULTIPLY . multDiv
    (64) multDiv -> . expParen
    (65) multDiv -> . expParen MULTIPLY multDiv
    (66) multDiv -> . expParen DIVIDE multDiv
    (67) expParen -> . OPAREN expRelational CPAREN
    (68) expParen -> . varCte
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    expParen                       shift and go to state 109
    multDiv                        shift and go to state 168
    varCte                         shift and go to state 110

state 147

    (66) multDiv -> expParen DIVIDE . multDiv
    (64) multDiv -> . expParen
    (65) multDiv -> . expParen MULTIPLY multDiv
    (66) multDiv -> . expParen DIVIDE multDiv
    (67) expParen -> . OPAREN expRelational CPAREN
    (68) expParen -> . varCte
    (83) varCte -> . INT
    (84) varCte -> . DEC
    (85) varCte -> . STRING
    (86) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 111
    DEC             shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 120

    expParen                       shift and go to state 109
    multDiv                        shift and go to state 169
    varCte                         shift and go to state 110

state 148

    (22) paramCall -> ID COMMA . paramCall
    (21) paramCall -> . ID
    (22) paramCall -> . ID COMMA paramCall
    (23) paramCall -> . epsilon
    (93) epsilon -> .

    ID              shift and go to state 114
    CPAREN          reduce using rule 93 (epsilon -> .)

    paramCall                      shift and go to state 170
    epsilon                        shift and go to state 116

state 149

    (24) voidCall -> ID OPAREN paramCall CPAREN . EOF

    EOF             shift and go to state 171


state 150

    (77) classCall -> ID MONEY ID OPAREN . paramCall CPAREN EOF
    (21) paramCall -> . ID
    (22) paramCall -> . ID COMMA paramCall
    (23) paramCall -> . epsilon
    (93) epsilon -> .

    ID              shift and go to state 114
    CPAREN          reduce using rule 93 (epsilon -> .)

    paramCall                      shift and go to state 172
    epsilon                        shift and go to state 116

state 151

    (90) input -> INPUT OPAREN ID CPAREN . EOF

    EOF             shift and go to state 173


state 152

    (91) output -> OUTPUT OPAREN expRelational CPAREN . EOF

    EOF             shift and go to state 174


state 153

    (87) whileCycle -> WHILE OPAREN expRelational CPAREN . OBRACKET body CBRACKET

    OBRACKET        shift and go to state 175


state 154

    (88) ifCond -> IF OPAREN expRelational CPAREN . OBRACKET body CBRACKET

    OBRACKET        shift and go to state 176


state 155

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body . CBRACKET fxDef

    CBRACKET        shift and go to state 177


state 156

    (14) param -> paramType ID pointParam COMMA . param
    (13) param -> . paramType ID pointParam
    (14) param -> . paramType ID pointParam COMMA param
    (15) param -> . epsilon
    (16) paramType -> . INT
    (17) paramType -> . STRING
    (18) paramType -> . DEC
    (19) paramType -> . BOOL
    (93) epsilon -> .

    INT             shift and go to state 64
    STRING          shift and go to state 65
    DEC             shift and go to state 66
    BOOL            shift and go to state 67
    CPAREN          reduce using rule 93 (epsilon -> .)

    paramType                      shift and go to state 62
    param                          shift and go to state 178
    epsilon                        shift and go to state 63

state 157

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body . RETURN ID EOF CBRACKET fxDef

    RETURN          shift and go to state 179


state 158

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass . fxDef pointScopeClass2 CBRACKET classDef
    (4) fxDef -> . VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (5) fxDef -> . fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (6) fxDef -> . epsilon
    (7) fxType -> . INT
    (8) fxType -> . STRING
    (9) fxType -> . DEC
    (10) fxType -> . BOOL
    (93) epsilon -> .

    VOID            shift and go to state 10
    INT             shift and go to state 13
    STRING          shift and go to state 14
    DEC             shift and go to state 15
    BOOL            shift and go to state 16
    CBRACKET        reduce using rule 93 (epsilon -> .)

    fxDef                          shift and go to state 180
    fxType                         shift and go to state 11
    epsilon                        shift and go to state 12

state 159

    (42) var -> varsType COMMA var .

    EOF             reduce using rule 42 (var -> varsType COMMA var .)


state 160

    (46) arrDef -> ID OSQUAREBR varCte . CSQUAREBR

    CSQUAREBR       shift and go to state 181


state 161

    (47) matrixDef -> arrDef OSQUAREBR varCte . CSQUAREBR

    CSQUAREBR       shift and go to state 182


state 162

    (89) ifCond -> ifCond ELSE OBRACKET body CBRACKET .

    ELSE            reduce using rule 89 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    VAR             reduce using rule 89 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    ID              reduce using rule 89 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    INPUT           reduce using rule 89 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    OUTPUT          reduce using rule 89 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    WHILE           reduce using rule 89 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    IF              reduce using rule 89 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    CBRACKET        reduce using rule 89 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    RETURN          reduce using rule 89 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)


state 163

    (52) returnCall -> ID OPAREN paramCall . CPAREN

    CPAREN          shift and go to state 183


state 164

    (54) expRelational -> plusMinus opRelational expRelational .

    EOF             reduce using rule 54 (expRelational -> plusMinus opRelational expRelational .)
    CPAREN          reduce using rule 54 (expRelational -> plusMinus opRelational expRelational .)


state 165

    (67) expParen -> OPAREN expRelational CPAREN .

    MULTIPLY        reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    DIVIDE          reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    PLUS            reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    MINUS           reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    EQUAL           reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    DIFFERENT       reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    GREATERTHAN     reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    GREATERTHANEQ   reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    LESSTHAN        reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    LESSTHANEQ      reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    EOF             reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)
    CPAREN          reduce using rule 67 (expParen -> OPAREN expRelational CPAREN .)


state 166

    (62) plusMinus -> multDiv PLUS plusMinus .

    EQUAL           reduce using rule 62 (plusMinus -> multDiv PLUS plusMinus .)
    DIFFERENT       reduce using rule 62 (plusMinus -> multDiv PLUS plusMinus .)
    GREATERTHAN     reduce using rule 62 (plusMinus -> multDiv PLUS plusMinus .)
    GREATERTHANEQ   reduce using rule 62 (plusMinus -> multDiv PLUS plusMinus .)
    LESSTHAN        reduce using rule 62 (plusMinus -> multDiv PLUS plusMinus .)
    LESSTHANEQ      reduce using rule 62 (plusMinus -> multDiv PLUS plusMinus .)
    EOF             reduce using rule 62 (plusMinus -> multDiv PLUS plusMinus .)
    CPAREN          reduce using rule 62 (plusMinus -> multDiv PLUS plusMinus .)


state 167

    (63) plusMinus -> multDiv MINUS plusMinus .

    EQUAL           reduce using rule 63 (plusMinus -> multDiv MINUS plusMinus .)
    DIFFERENT       reduce using rule 63 (plusMinus -> multDiv MINUS plusMinus .)
    GREATERTHAN     reduce using rule 63 (plusMinus -> multDiv MINUS plusMinus .)
    GREATERTHANEQ   reduce using rule 63 (plusMinus -> multDiv MINUS plusMinus .)
    LESSTHAN        reduce using rule 63 (plusMinus -> multDiv MINUS plusMinus .)
    LESSTHANEQ      reduce using rule 63 (plusMinus -> multDiv MINUS plusMinus .)
    EOF             reduce using rule 63 (plusMinus -> multDiv MINUS plusMinus .)
    CPAREN          reduce using rule 63 (plusMinus -> multDiv MINUS plusMinus .)


state 168

    (65) multDiv -> expParen MULTIPLY multDiv .

    PLUS            reduce using rule 65 (multDiv -> expParen MULTIPLY multDiv .)
    MINUS           reduce using rule 65 (multDiv -> expParen MULTIPLY multDiv .)
    EQUAL           reduce using rule 65 (multDiv -> expParen MULTIPLY multDiv .)
    DIFFERENT       reduce using rule 65 (multDiv -> expParen MULTIPLY multDiv .)
    GREATERTHAN     reduce using rule 65 (multDiv -> expParen MULTIPLY multDiv .)
    GREATERTHANEQ   reduce using rule 65 (multDiv -> expParen MULTIPLY multDiv .)
    LESSTHAN        reduce using rule 65 (multDiv -> expParen MULTIPLY multDiv .)
    LESSTHANEQ      reduce using rule 65 (multDiv -> expParen MULTIPLY multDiv .)
    EOF             reduce using rule 65 (multDiv -> expParen MULTIPLY multDiv .)
    CPAREN          reduce using rule 65 (multDiv -> expParen MULTIPLY multDiv .)


state 169

    (66) multDiv -> expParen DIVIDE multDiv .

    PLUS            reduce using rule 66 (multDiv -> expParen DIVIDE multDiv .)
    MINUS           reduce using rule 66 (multDiv -> expParen DIVIDE multDiv .)
    EQUAL           reduce using rule 66 (multDiv -> expParen DIVIDE multDiv .)
    DIFFERENT       reduce using rule 66 (multDiv -> expParen DIVIDE multDiv .)
    GREATERTHAN     reduce using rule 66 (multDiv -> expParen DIVIDE multDiv .)
    GREATERTHANEQ   reduce using rule 66 (multDiv -> expParen DIVIDE multDiv .)
    LESSTHAN        reduce using rule 66 (multDiv -> expParen DIVIDE multDiv .)
    LESSTHANEQ      reduce using rule 66 (multDiv -> expParen DIVIDE multDiv .)
    EOF             reduce using rule 66 (multDiv -> expParen DIVIDE multDiv .)
    CPAREN          reduce using rule 66 (multDiv -> expParen DIVIDE multDiv .)


state 170

    (22) paramCall -> ID COMMA paramCall .

    CPAREN          reduce using rule 22 (paramCall -> ID COMMA paramCall .)


state 171

    (24) voidCall -> ID OPAREN paramCall CPAREN EOF .

    VAR             reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    ID              reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    INPUT           reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    OUTPUT          reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    WHILE           reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    IF              reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    CBRACKET        reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    RETURN          reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)


state 172

    (77) classCall -> ID MONEY ID OPAREN paramCall . CPAREN EOF

    CPAREN          shift and go to state 184


state 173

    (90) input -> INPUT OPAREN ID CPAREN EOF .

    VAR             reduce using rule 90 (input -> INPUT OPAREN ID CPAREN EOF .)
    ID              reduce using rule 90 (input -> INPUT OPAREN ID CPAREN EOF .)
    INPUT           reduce using rule 90 (input -> INPUT OPAREN ID CPAREN EOF .)
    OUTPUT          reduce using rule 90 (input -> INPUT OPAREN ID CPAREN EOF .)
    WHILE           reduce using rule 90 (input -> INPUT OPAREN ID CPAREN EOF .)
    IF              reduce using rule 90 (input -> INPUT OPAREN ID CPAREN EOF .)
    CBRACKET        reduce using rule 90 (input -> INPUT OPAREN ID CPAREN EOF .)
    RETURN          reduce using rule 90 (input -> INPUT OPAREN ID CPAREN EOF .)


state 174

    (91) output -> OUTPUT OPAREN expRelational CPAREN EOF .

    VAR             reduce using rule 91 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    ID              reduce using rule 91 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    INPUT           reduce using rule 91 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    OUTPUT          reduce using rule 91 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    WHILE           reduce using rule 91 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    IF              reduce using rule 91 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    CBRACKET        reduce using rule 91 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    RETURN          reduce using rule 91 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)


state 175

    (87) whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET . body CBRACKET
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (93) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT expAssignment
    (90) input -> . INPUT OPAREN ID CPAREN EOF
    (91) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (87) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (88) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (89) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (77) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 93 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    body                           shift and go to state 185
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 176

    (88) ifCond -> IF OPAREN expRelational CPAREN OBRACKET . body CBRACKET
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (93) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT expAssignment
    (90) input -> . INPUT OPAREN ID CPAREN EOF
    (91) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (87) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (88) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (89) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (77) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 93 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    body                           shift and go to state 186
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 177

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET . fxDef
    (4) fxDef -> . VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (5) fxDef -> . fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (6) fxDef -> . epsilon
    (7) fxType -> . INT
    (8) fxType -> . STRING
    (9) fxType -> . DEC
    (10) fxType -> . BOOL
    (93) epsilon -> .

    VOID            shift and go to state 10
    INT             shift and go to state 13
    STRING          shift and go to state 14
    DEC             shift and go to state 15
    BOOL            shift and go to state 16
    MAIN            reduce using rule 93 (epsilon -> .)
    CBRACKET        reduce using rule 93 (epsilon -> .)

    fxDef                          shift and go to state 187
    fxType                         shift and go to state 11
    epsilon                        shift and go to state 12

state 178

    (14) param -> paramType ID pointParam COMMA param .

    CPAREN          reduce using rule 14 (param -> paramType ID pointParam COMMA param .)


state 179

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN . ID EOF CBRACKET fxDef

    ID              shift and go to state 188


state 180

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef . pointScopeClass2 CBRACKET classDef
    (74) pointScopeClass2 -> .

    CBRACKET        reduce using rule 74 (pointScopeClass2 -> .)

    pointScopeClass2               shift and go to state 189

state 181

    (46) arrDef -> ID OSQUAREBR varCte CSQUAREBR .

    OSQUAREBR       reduce using rule 46 (arrDef -> ID OSQUAREBR varCte CSQUAREBR .)
    COMMA           reduce using rule 46 (arrDef -> ID OSQUAREBR varCte CSQUAREBR .)
    EOF             reduce using rule 46 (arrDef -> ID OSQUAREBR varCte CSQUAREBR .)


state 182

    (47) matrixDef -> arrDef OSQUAREBR varCte CSQUAREBR .

    COMMA           reduce using rule 47 (matrixDef -> arrDef OSQUAREBR varCte CSQUAREBR .)
    EOF             reduce using rule 47 (matrixDef -> arrDef OSQUAREBR varCte CSQUAREBR .)


state 183

    (52) returnCall -> ID OPAREN paramCall CPAREN .

    EOF             reduce using rule 52 (returnCall -> ID OPAREN paramCall CPAREN .)


state 184

    (77) classCall -> ID MONEY ID OPAREN paramCall CPAREN . EOF

    EOF             shift and go to state 190


state 185

    (87) whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body . CBRACKET

    CBRACKET        shift and go to state 191


state 186

    (88) ifCond -> IF OPAREN expRelational CPAREN OBRACKET body . CBRACKET

    CBRACKET        shift and go to state 192


state 187

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef .

    MAIN            reduce using rule 4 (fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef .)
    CBRACKET        reduce using rule 4 (fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef .)


state 188

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID . EOF CBRACKET fxDef

    EOF             shift and go to state 193


state 189

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 . CBRACKET classDef

    CBRACKET        shift and go to state 194


state 190

    (77) classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .

    VAR             reduce using rule 77 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    ID              reduce using rule 77 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    INPUT           reduce using rule 77 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    OUTPUT          reduce using rule 77 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    WHILE           reduce using rule 77 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    IF              reduce using rule 77 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    CBRACKET        reduce using rule 77 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    RETURN          reduce using rule 77 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)


state 191

    (87) whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .

    VAR             reduce using rule 87 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    ID              reduce using rule 87 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    INPUT           reduce using rule 87 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    OUTPUT          reduce using rule 87 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    WHILE           reduce using rule 87 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    IF              reduce using rule 87 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    CBRACKET        reduce using rule 87 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    RETURN          reduce using rule 87 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)


state 192

    (88) ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .

    ELSE            reduce using rule 88 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    VAR             reduce using rule 88 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    ID              reduce using rule 88 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    INPUT           reduce using rule 88 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    OUTPUT          reduce using rule 88 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    WHILE           reduce using rule 88 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    IF              reduce using rule 88 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    CBRACKET        reduce using rule 88 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    RETURN          reduce using rule 88 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)


state 193

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF . CBRACKET fxDef

    CBRACKET        shift and go to state 195


state 194

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET . classDef
    (69) classDef -> . CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (70) classDef -> . epsilon
    (93) epsilon -> .

    CLASS           shift and go to state 7
    VOID            reduce using rule 93 (epsilon -> .)
    INT             reduce using rule 93 (epsilon -> .)
    STRING          reduce using rule 93 (epsilon -> .)
    DEC             reduce using rule 93 (epsilon -> .)
    BOOL            reduce using rule 93 (epsilon -> .)
    MAIN            reduce using rule 93 (epsilon -> .)

    classDef                       shift and go to state 196
    epsilon                        shift and go to state 8

state 195

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET . fxDef
    (4) fxDef -> . VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (5) fxDef -> . fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (6) fxDef -> . epsilon
    (7) fxType -> . INT
    (8) fxType -> . STRING
    (9) fxType -> . DEC
    (10) fxType -> . BOOL
    (93) epsilon -> .

    VOID            shift and go to state 10
    INT             shift and go to state 13
    STRING          shift and go to state 14
    DEC             shift and go to state 15
    BOOL            shift and go to state 16
    MAIN            reduce using rule 93 (epsilon -> .)
    CBRACKET        reduce using rule 93 (epsilon -> .)

    fxType                         shift and go to state 11
    fxDef                          shift and go to state 197
    epsilon                        shift and go to state 12

state 196

    (69) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .

    VOID            reduce using rule 69 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)
    INT             reduce using rule 69 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)
    STRING          reduce using rule 69 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)
    DEC             reduce using rule 69 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)
    BOOL            reduce using rule 69 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)
    MAIN            reduce using rule 69 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)


state 197

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef .

    MAIN            reduce using rule 5 (fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef .)
    CBRACKET        reduce using rule 5 (fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef .)

