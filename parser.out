Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> begin
Rule 1     begin -> BEGIN OPAREN ID CPAREN classDef fxDef main end
Rule 2     pointMain -> <empty>
Rule 3     main -> MAIN pointMain OPAREN CPAREN OBRACKET body CBRACKET
Rule 4     fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
Rule 5     fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
Rule 6     fxDef -> epsilon
Rule 7     fxType -> INT
Rule 8     fxType -> STRING
Rule 9     fxType -> DEC
Rule 10    fxType -> BOOL
Rule 11    pointFx -> <empty>
Rule 12    pointFxId -> <empty>
Rule 13    param -> paramType ID pointParam
Rule 14    param -> paramType ID pointParam COMMA param
Rule 15    param -> epsilon
Rule 16    paramType -> INT
Rule 17    paramType -> STRING
Rule 18    paramType -> DEC
Rule 19    paramType -> BOOL
Rule 20    pointParam -> <empty>
Rule 21    paramCall -> ID
Rule 22    paramCall -> ID COMMA paramCall
Rule 23    paramCall -> epsilon
Rule 24    voidCall -> ID OPAREN paramCall CPAREN EOF
Rule 25    body -> varsDef body
Rule 26    body -> statements body
Rule 27    body -> epsilon
Rule 28    statements -> assignmentDef
Rule 29    statements -> input
Rule 30    statements -> output
Rule 31    statements -> voidCall
Rule 32    statements -> whileCycle
Rule 33    statements -> ifCond
Rule 34    statements -> classCall
Rule 35    varsDef -> VAR objType var EOF
Rule 36    varsDef -> VAR varSimpleType var EOF
Rule 37    varSimpleType -> INT
Rule 38    varSimpleType -> STRING
Rule 39    varSimpleType -> DEC
Rule 40    varSimpleType -> BOOL
Rule 41    var -> varsType
Rule 42    var -> varsType COMMA var
Rule 43    varsType -> ID
Rule 44    varsType -> arrDef
Rule 45    varsType -> matrixDef
Rule 46    arrDef -> ID OSQUAREBR varCte CSQUAREBR
Rule 47    matrixDef -> arrDef OSQUAREBR varCte CSQUAREBR
Rule 48    assignmentDef -> ID ASSIGNMENT pointPushAssignment expAssignment
Rule 49    pointPushAssignment -> <empty>
Rule 50    expAssignment -> expRelational EOF
Rule 51    expAssignment -> returnCall EOF
Rule 52    expAssignment -> classCall
Rule 53    returnCall -> ID OPAREN paramCall CPAREN
Rule 54    expRelational -> plusMinus
Rule 55    expRelational -> plusMinus opRelational expRelational pointCheckOpRel
Rule 56    pointCheckOpRel -> <empty>
Rule 57    opRelational -> EQUAL
Rule 58    opRelational -> DIFFERENT
Rule 59    opRelational -> GREATERTHAN
Rule 60    opRelational -> GREATERTHANEQ
Rule 61    opRelational -> LESSTHAN
Rule 62    opRelational -> LESSTHANEQ
Rule 63    plusMinus -> multDiv pointCheckPlusMinus
Rule 64    plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus
Rule 65    plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus
Rule 66    pointCheckPlusMinus -> <empty>
Rule 67    pointPushPlusMinus -> <empty>
Rule 68    multDiv -> expParen pointCheckMultDiv
Rule 69    multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
Rule 70    multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
Rule 71    pointCheckMultDiv -> <empty>
Rule 72    pointPushMultDiv -> <empty>
Rule 73    expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
Rule 74    expParen -> varCte
Rule 75    pointFakeBackground -> <empty>
Rule 76    pointRemoveFakeBackground -> <empty>
Rule 77    classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
Rule 78    classDef -> epsilon
Rule 79    pointAtt -> varsDef
Rule 80    pointAtt -> varsDef pointAtt
Rule 81    pointScopeClass -> <empty>
Rule 82    pointScopeClass2 -> <empty>
Rule 83    pointClassName -> <empty>
Rule 84    pointClass -> <empty>
Rule 85    classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF
Rule 86    objType -> ID
Rule 87    varCte -> INT pointINT
Rule 88    varCte -> DEC pointDEC
Rule 89    varCte -> STRING pointSTRING
Rule 90    varCte -> ID
Rule 91    pointINT -> <empty>
Rule 92    pointDEC -> <empty>
Rule 93    pointSTRING -> <empty>
Rule 94    whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
Rule 95    ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
Rule 96    ifCond -> ifCond ELSE OBRACKET body CBRACKET
Rule 97    input -> INPUT OPAREN ID CPAREN EOF
Rule 98    output -> OUTPUT OPAREN expRelational CPAREN EOF
Rule 99    end -> END OPAREN ID CPAREN
Rule 100   epsilon -> <empty>

Terminals, with rules where they appear

ASSIGNMENT           : 48
ATTRIBUTES           : 77
BEGIN                : 1
BOOL                 : 10 19 40
CBRACKET             : 3 4 5 77 94 95 96
CLASS                : 77
COLON                : 77 77
COMMA                : 14 22 42
CPAREN               : 1 3 4 5 24 53 73 85 94 95 97 98 99
CSQUAREBR            : 46 47
DEC                  : 9 18 39 88
DIFFERENT            : 58
DIVIDE               : 70
ELSE                 : 96
END                  : 99
EOF                  : 5 24 35 36 50 51 85 97 98
EQUAL                : 57
FX                   : 4 5
GREATERTHAN          : 59
GREATERTHANEQ        : 60
ID                   : 1 4 5 5 13 14 21 22 24 43 46 48 53 77 85 85 86 90 97 99
IF                   : 95
INPUT                : 97
INT                  : 7 16 37 87
LESSTHAN             : 61
LESSTHANEQ           : 62
MAIN                 : 3
METHODS              : 77
MINUS                : 65
MONEY                : 85
MULTIPLY             : 69
OBRACKET             : 3 4 5 77 94 95 96
OPAREN               : 1 3 4 5 24 53 73 85 94 95 97 98 99
OSQUAREBR            : 46 47
OUTPUT               : 98
PLUS                 : 64
RETURN               : 5
STRING               : 8 17 38 89
VAR                  : 35 36
VOID                 : 4
WHILE                : 94
error                : 

Nonterminals, with rules where they appear

arrDef               : 44 47
assignmentDef        : 28
begin                : 0
body                 : 3 4 5 25 26 94 95 96
classCall            : 34 52
classDef             : 1 77
end                  : 1
epsilon              : 6 15 23 27 78
expAssignment        : 48
expParen             : 68 69 70
expRelational        : 50 55 73 94 95 98
fxDef                : 1 4 5 77
fxType               : 5
ifCond               : 33 96
input                : 29
main                 : 1
matrixDef            : 45
multDiv              : 63 64 65 69 70
objType              : 35
opRelational         : 55
output               : 30
param                : 4 5 14
paramCall            : 22 24 53 85
paramType            : 13 14
plusMinus            : 54 55 64 65
pointAtt             : 77 80
pointCheckMultDiv    : 68 69 70
pointCheckOpRel      : 55
pointCheckPlusMinus  : 63 64 65
pointClass           : 77
pointClassName       : 77
pointDEC             : 88
pointFakeBackground  : 73
pointFx              : 4 5
pointFxId            : 4 5
pointINT             : 87
pointMain            : 3
pointParam           : 13 14
pointPushAssignment  : 48
pointPushMultDiv     : 69 70
pointPushPlusMinus   : 64 65
pointRemoveFakeBackground : 73
pointSTRING          : 89
pointScopeClass      : 77
pointScopeClass2     : 77
returnCall           : 51
statements           : 26
var                  : 35 36 42
varCte               : 46 47 74
varSimpleType        : 36
varsDef              : 25 79 80
varsType             : 41 42
voidCall             : 31
whileCycle           : 32

Parsing method: LALR

state 0

    (0) S' -> . begin
    (1) begin -> . BEGIN OPAREN ID CPAREN classDef fxDef main end

    BEGIN           shift and go to state 2

    begin                          shift and go to state 1

state 1

    (0) S' -> begin .



state 2

    (1) begin -> BEGIN . OPAREN ID CPAREN classDef fxDef main end

    OPAREN          shift and go to state 3


state 3

    (1) begin -> BEGIN OPAREN . ID CPAREN classDef fxDef main end

    ID              shift and go to state 4


state 4

    (1) begin -> BEGIN OPAREN ID . CPAREN classDef fxDef main end

    CPAREN          shift and go to state 5


state 5

    (1) begin -> BEGIN OPAREN ID CPAREN . classDef fxDef main end
    (77) classDef -> . CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (78) classDef -> . epsilon
    (100) epsilon -> .

    CLASS           shift and go to state 7
    VOID            reduce using rule 100 (epsilon -> .)
    INT             reduce using rule 100 (epsilon -> .)
    STRING          reduce using rule 100 (epsilon -> .)
    DEC             reduce using rule 100 (epsilon -> .)
    BOOL            reduce using rule 100 (epsilon -> .)
    MAIN            reduce using rule 100 (epsilon -> .)

    classDef                       shift and go to state 6
    epsilon                        shift and go to state 8

state 6

    (1) begin -> BEGIN OPAREN ID CPAREN classDef . fxDef main end
    (4) fxDef -> . VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (5) fxDef -> . fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (6) fxDef -> . epsilon
    (7) fxType -> . INT
    (8) fxType -> . STRING
    (9) fxType -> . DEC
    (10) fxType -> . BOOL
    (100) epsilon -> .

    VOID            shift and go to state 10
    INT             shift and go to state 13
    STRING          shift and go to state 14
    DEC             shift and go to state 15
    BOOL            shift and go to state 16
    MAIN            reduce using rule 100 (epsilon -> .)

    fxDef                          shift and go to state 9
    fxType                         shift and go to state 11
    epsilon                        shift and go to state 12

state 7

    (77) classDef -> CLASS . pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (84) pointClass -> .

    ID              reduce using rule 84 (pointClass -> .)

    pointClass                     shift and go to state 17

state 8

    (78) classDef -> epsilon .

    VOID            reduce using rule 78 (classDef -> epsilon .)
    INT             reduce using rule 78 (classDef -> epsilon .)
    STRING          reduce using rule 78 (classDef -> epsilon .)
    DEC             reduce using rule 78 (classDef -> epsilon .)
    BOOL            reduce using rule 78 (classDef -> epsilon .)
    MAIN            reduce using rule 78 (classDef -> epsilon .)


state 9

    (1) begin -> BEGIN OPAREN ID CPAREN classDef fxDef . main end
    (3) main -> . MAIN pointMain OPAREN CPAREN OBRACKET body CBRACKET

    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 10

    (4) fxDef -> VOID . FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef

    FX              shift and go to state 20


state 11

    (5) fxDef -> fxType . FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef

    FX              shift and go to state 21


state 12

    (6) fxDef -> epsilon .

    MAIN            reduce using rule 6 (fxDef -> epsilon .)
    CBRACKET        reduce using rule 6 (fxDef -> epsilon .)


state 13

    (7) fxType -> INT .

    FX              reduce using rule 7 (fxType -> INT .)


state 14

    (8) fxType -> STRING .

    FX              reduce using rule 8 (fxType -> STRING .)


state 15

    (9) fxType -> DEC .

    FX              reduce using rule 9 (fxType -> DEC .)


state 16

    (10) fxType -> BOOL .

    FX              reduce using rule 10 (fxType -> BOOL .)


state 17

    (77) classDef -> CLASS pointClass . ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    ID              shift and go to state 22


state 18

    (1) begin -> BEGIN OPAREN ID CPAREN classDef fxDef main . end
    (99) end -> . END OPAREN ID CPAREN

    END             shift and go to state 24

    end                            shift and go to state 23

state 19

    (3) main -> MAIN . pointMain OPAREN CPAREN OBRACKET body CBRACKET
    (2) pointMain -> .

    OPAREN          reduce using rule 2 (pointMain -> .)

    pointMain                      shift and go to state 25

state 20

    (4) fxDef -> VOID FX . pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (11) pointFx -> .

    ID              reduce using rule 11 (pointFx -> .)

    pointFx                        shift and go to state 26

state 21

    (5) fxDef -> fxType FX . pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (11) pointFx -> .

    ID              reduce using rule 11 (pointFx -> .)

    pointFx                        shift and go to state 27

state 22

    (77) classDef -> CLASS pointClass ID . pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (83) pointClassName -> .

    OBRACKET        reduce using rule 83 (pointClassName -> .)

    pointClassName                 shift and go to state 28

state 23

    (1) begin -> BEGIN OPAREN ID CPAREN classDef fxDef main end .

    $end            reduce using rule 1 (begin -> BEGIN OPAREN ID CPAREN classDef fxDef main end .)


state 24

    (99) end -> END . OPAREN ID CPAREN

    OPAREN          shift and go to state 29


state 25

    (3) main -> MAIN pointMain . OPAREN CPAREN OBRACKET body CBRACKET

    OPAREN          shift and go to state 30


state 26

    (4) fxDef -> VOID FX pointFx . ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef

    ID              shift and go to state 31


state 27

    (5) fxDef -> fxType FX pointFx . ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef

    ID              shift and go to state 32


state 28

    (77) classDef -> CLASS pointClass ID pointClassName . OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    OBRACKET        shift and go to state 33


state 29

    (99) end -> END OPAREN . ID CPAREN

    ID              shift and go to state 34


state 30

    (3) main -> MAIN pointMain OPAREN . CPAREN OBRACKET body CBRACKET

    CPAREN          shift and go to state 35


state 31

    (4) fxDef -> VOID FX pointFx ID . pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (12) pointFxId -> .

    OPAREN          reduce using rule 12 (pointFxId -> .)

    pointFxId                      shift and go to state 36

state 32

    (5) fxDef -> fxType FX pointFx ID . pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (12) pointFxId -> .

    OPAREN          reduce using rule 12 (pointFxId -> .)

    pointFxId                      shift and go to state 37

state 33

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET . ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    ATTRIBUTES      shift and go to state 38


state 34

    (99) end -> END OPAREN ID . CPAREN

    CPAREN          shift and go to state 39


state 35

    (3) main -> MAIN pointMain OPAREN CPAREN . OBRACKET body CBRACKET

    OBRACKET        shift and go to state 40


state 36

    (4) fxDef -> VOID FX pointFx ID pointFxId . OPAREN param CPAREN OBRACKET body CBRACKET fxDef

    OPAREN          shift and go to state 41


state 37

    (5) fxDef -> fxType FX pointFx ID pointFxId . OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef

    OPAREN          shift and go to state 42


state 38

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES . COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    COLON           shift and go to state 43


state 39

    (99) end -> END OPAREN ID CPAREN .

    $end            reduce using rule 99 (end -> END OPAREN ID CPAREN .)


state 40

    (3) main -> MAIN pointMain OPAREN CPAREN OBRACKET . body CBRACKET
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (100) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT pointPushAssignment expAssignment
    (97) input -> . INPUT OPAREN ID CPAREN EOF
    (98) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (94) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (95) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (96) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (85) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 100 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    body                           shift and go to state 44
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 41

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN . param CPAREN OBRACKET body CBRACKET fxDef
    (13) param -> . paramType ID pointParam
    (14) param -> . paramType ID pointParam COMMA param
    (15) param -> . epsilon
    (16) paramType -> . INT
    (17) paramType -> . STRING
    (18) paramType -> . DEC
    (19) paramType -> . BOOL
    (100) epsilon -> .

    INT             shift and go to state 64
    STRING          shift and go to state 65
    DEC             shift and go to state 66
    BOOL            shift and go to state 67
    CPAREN          reduce using rule 100 (epsilon -> .)

    param                          shift and go to state 61
    paramType                      shift and go to state 62
    epsilon                        shift and go to state 63

state 42

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN . param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (13) param -> . paramType ID pointParam
    (14) param -> . paramType ID pointParam COMMA param
    (15) param -> . epsilon
    (16) paramType -> . INT
    (17) paramType -> . STRING
    (18) paramType -> . DEC
    (19) paramType -> . BOOL
    (100) epsilon -> .

    INT             shift and go to state 64
    STRING          shift and go to state 65
    DEC             shift and go to state 66
    BOOL            shift and go to state 67
    CPAREN          reduce using rule 100 (epsilon -> .)

    param                          shift and go to state 68
    paramType                      shift and go to state 62
    epsilon                        shift and go to state 63

state 43

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON . pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (79) pointAtt -> . varsDef
    (80) pointAtt -> . varsDef pointAtt
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF

    VAR             shift and go to state 48

    pointAtt                       shift and go to state 69
    varsDef                        shift and go to state 70

state 44

    (3) main -> MAIN pointMain OPAREN CPAREN OBRACKET body . CBRACKET

    CBRACKET        shift and go to state 71


state 45

    (25) body -> varsDef . body
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (100) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT pointPushAssignment expAssignment
    (97) input -> . INPUT OPAREN ID CPAREN EOF
    (98) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (94) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (95) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (96) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (85) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 100 (epsilon -> .)
    RETURN          reduce using rule 100 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    varsDef                        shift and go to state 45
    body                           shift and go to state 72
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 46

    (26) body -> statements . body
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (100) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT pointPushAssignment expAssignment
    (97) input -> . INPUT OPAREN ID CPAREN EOF
    (98) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (94) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (95) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (96) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (85) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 100 (epsilon -> .)
    RETURN          reduce using rule 100 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    statements                     shift and go to state 46
    body                           shift and go to state 73
    varsDef                        shift and go to state 45
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 47

    (27) body -> epsilon .

    CBRACKET        reduce using rule 27 (body -> epsilon .)
    RETURN          reduce using rule 27 (body -> epsilon .)


state 48

    (35) varsDef -> VAR . objType var EOF
    (36) varsDef -> VAR . varSimpleType var EOF
    (86) objType -> . ID
    (37) varSimpleType -> . INT
    (38) varSimpleType -> . STRING
    (39) varSimpleType -> . DEC
    (40) varSimpleType -> . BOOL

    ID              shift and go to state 76
    INT             shift and go to state 77
    STRING          shift and go to state 78
    DEC             shift and go to state 79
    BOOL            shift and go to state 80

    objType                        shift and go to state 74
    varSimpleType                  shift and go to state 75

state 49

    (28) statements -> assignmentDef .

    VAR             reduce using rule 28 (statements -> assignmentDef .)
    ID              reduce using rule 28 (statements -> assignmentDef .)
    INPUT           reduce using rule 28 (statements -> assignmentDef .)
    OUTPUT          reduce using rule 28 (statements -> assignmentDef .)
    WHILE           reduce using rule 28 (statements -> assignmentDef .)
    IF              reduce using rule 28 (statements -> assignmentDef .)
    CBRACKET        reduce using rule 28 (statements -> assignmentDef .)
    RETURN          reduce using rule 28 (statements -> assignmentDef .)


state 50

    (29) statements -> input .

    VAR             reduce using rule 29 (statements -> input .)
    ID              reduce using rule 29 (statements -> input .)
    INPUT           reduce using rule 29 (statements -> input .)
    OUTPUT          reduce using rule 29 (statements -> input .)
    WHILE           reduce using rule 29 (statements -> input .)
    IF              reduce using rule 29 (statements -> input .)
    CBRACKET        reduce using rule 29 (statements -> input .)
    RETURN          reduce using rule 29 (statements -> input .)


state 51

    (30) statements -> output .

    VAR             reduce using rule 30 (statements -> output .)
    ID              reduce using rule 30 (statements -> output .)
    INPUT           reduce using rule 30 (statements -> output .)
    OUTPUT          reduce using rule 30 (statements -> output .)
    WHILE           reduce using rule 30 (statements -> output .)
    IF              reduce using rule 30 (statements -> output .)
    CBRACKET        reduce using rule 30 (statements -> output .)
    RETURN          reduce using rule 30 (statements -> output .)


state 52

    (31) statements -> voidCall .

    VAR             reduce using rule 31 (statements -> voidCall .)
    ID              reduce using rule 31 (statements -> voidCall .)
    INPUT           reduce using rule 31 (statements -> voidCall .)
    OUTPUT          reduce using rule 31 (statements -> voidCall .)
    WHILE           reduce using rule 31 (statements -> voidCall .)
    IF              reduce using rule 31 (statements -> voidCall .)
    CBRACKET        reduce using rule 31 (statements -> voidCall .)
    RETURN          reduce using rule 31 (statements -> voidCall .)


state 53

    (32) statements -> whileCycle .

    VAR             reduce using rule 32 (statements -> whileCycle .)
    ID              reduce using rule 32 (statements -> whileCycle .)
    INPUT           reduce using rule 32 (statements -> whileCycle .)
    OUTPUT          reduce using rule 32 (statements -> whileCycle .)
    WHILE           reduce using rule 32 (statements -> whileCycle .)
    IF              reduce using rule 32 (statements -> whileCycle .)
    CBRACKET        reduce using rule 32 (statements -> whileCycle .)
    RETURN          reduce using rule 32 (statements -> whileCycle .)


state 54

    (33) statements -> ifCond .
    (96) ifCond -> ifCond . ELSE OBRACKET body CBRACKET

    VAR             reduce using rule 33 (statements -> ifCond .)
    ID              reduce using rule 33 (statements -> ifCond .)
    INPUT           reduce using rule 33 (statements -> ifCond .)
    OUTPUT          reduce using rule 33 (statements -> ifCond .)
    WHILE           reduce using rule 33 (statements -> ifCond .)
    IF              reduce using rule 33 (statements -> ifCond .)
    CBRACKET        reduce using rule 33 (statements -> ifCond .)
    RETURN          reduce using rule 33 (statements -> ifCond .)
    ELSE            shift and go to state 81


state 55

    (34) statements -> classCall .

    VAR             reduce using rule 34 (statements -> classCall .)
    ID              reduce using rule 34 (statements -> classCall .)
    INPUT           reduce using rule 34 (statements -> classCall .)
    OUTPUT          reduce using rule 34 (statements -> classCall .)
    WHILE           reduce using rule 34 (statements -> classCall .)
    IF              reduce using rule 34 (statements -> classCall .)
    CBRACKET        reduce using rule 34 (statements -> classCall .)
    RETURN          reduce using rule 34 (statements -> classCall .)


state 56

    (48) assignmentDef -> ID . ASSIGNMENT pointPushAssignment expAssignment
    (24) voidCall -> ID . OPAREN paramCall CPAREN EOF
    (85) classCall -> ID . MONEY ID OPAREN paramCall CPAREN EOF

    ASSIGNMENT      shift and go to state 82
    OPAREN          shift and go to state 83
    MONEY           shift and go to state 84


state 57

    (97) input -> INPUT . OPAREN ID CPAREN EOF

    OPAREN          shift and go to state 85


state 58

    (98) output -> OUTPUT . OPAREN expRelational CPAREN EOF

    OPAREN          shift and go to state 86


state 59

    (94) whileCycle -> WHILE . OPAREN expRelational CPAREN OBRACKET body CBRACKET

    OPAREN          shift and go to state 87


state 60

    (95) ifCond -> IF . OPAREN expRelational CPAREN OBRACKET body CBRACKET

    OPAREN          shift and go to state 88


state 61

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param . CPAREN OBRACKET body CBRACKET fxDef

    CPAREN          shift and go to state 89


state 62

    (13) param -> paramType . ID pointParam
    (14) param -> paramType . ID pointParam COMMA param

    ID              shift and go to state 90


state 63

    (15) param -> epsilon .

    CPAREN          reduce using rule 15 (param -> epsilon .)


state 64

    (16) paramType -> INT .

    ID              reduce using rule 16 (paramType -> INT .)


state 65

    (17) paramType -> STRING .

    ID              reduce using rule 17 (paramType -> STRING .)


state 66

    (18) paramType -> DEC .

    ID              reduce using rule 18 (paramType -> DEC .)


state 67

    (19) paramType -> BOOL .

    ID              reduce using rule 19 (paramType -> BOOL .)


state 68

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param . CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef

    CPAREN          shift and go to state 91


state 69

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt . METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    METHODS         shift and go to state 92


state 70

    (79) pointAtt -> varsDef .
    (80) pointAtt -> varsDef . pointAtt
    (79) pointAtt -> . varsDef
    (80) pointAtt -> . varsDef pointAtt
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF

    METHODS         reduce using rule 79 (pointAtt -> varsDef .)
    VAR             shift and go to state 48

    varsDef                        shift and go to state 70
    pointAtt                       shift and go to state 93

state 71

    (3) main -> MAIN pointMain OPAREN CPAREN OBRACKET body CBRACKET .

    END             reduce using rule 3 (main -> MAIN pointMain OPAREN CPAREN OBRACKET body CBRACKET .)


state 72

    (25) body -> varsDef body .

    CBRACKET        reduce using rule 25 (body -> varsDef body .)
    RETURN          reduce using rule 25 (body -> varsDef body .)


state 73

    (26) body -> statements body .

    CBRACKET        reduce using rule 26 (body -> statements body .)
    RETURN          reduce using rule 26 (body -> statements body .)


state 74

    (35) varsDef -> VAR objType . var EOF
    (41) var -> . varsType
    (42) var -> . varsType COMMA var
    (43) varsType -> . ID
    (44) varsType -> . arrDef
    (45) varsType -> . matrixDef
    (46) arrDef -> . ID OSQUAREBR varCte CSQUAREBR
    (47) matrixDef -> . arrDef OSQUAREBR varCte CSQUAREBR

    ID              shift and go to state 96

    var                            shift and go to state 94
    varsType                       shift and go to state 95
    arrDef                         shift and go to state 97
    matrixDef                      shift and go to state 98

state 75

    (36) varsDef -> VAR varSimpleType . var EOF
    (41) var -> . varsType
    (42) var -> . varsType COMMA var
    (43) varsType -> . ID
    (44) varsType -> . arrDef
    (45) varsType -> . matrixDef
    (46) arrDef -> . ID OSQUAREBR varCte CSQUAREBR
    (47) matrixDef -> . arrDef OSQUAREBR varCte CSQUAREBR

    ID              shift and go to state 96

    var                            shift and go to state 99
    varsType                       shift and go to state 95
    arrDef                         shift and go to state 97
    matrixDef                      shift and go to state 98

state 76

    (86) objType -> ID .

    ID              reduce using rule 86 (objType -> ID .)


state 77

    (37) varSimpleType -> INT .

    ID              reduce using rule 37 (varSimpleType -> INT .)


state 78

    (38) varSimpleType -> STRING .

    ID              reduce using rule 38 (varSimpleType -> STRING .)


state 79

    (39) varSimpleType -> DEC .

    ID              reduce using rule 39 (varSimpleType -> DEC .)


state 80

    (40) varSimpleType -> BOOL .

    ID              reduce using rule 40 (varSimpleType -> BOOL .)


state 81

    (96) ifCond -> ifCond ELSE . OBRACKET body CBRACKET

    OBRACKET        shift and go to state 100


state 82

    (48) assignmentDef -> ID ASSIGNMENT . pointPushAssignment expAssignment
    (49) pointPushAssignment -> .

    ID              reduce using rule 49 (pointPushAssignment -> .)
    OPAREN          reduce using rule 49 (pointPushAssignment -> .)
    INT             reduce using rule 49 (pointPushAssignment -> .)
    DEC             reduce using rule 49 (pointPushAssignment -> .)
    STRING          reduce using rule 49 (pointPushAssignment -> .)

    pointPushAssignment            shift and go to state 101

state 83

    (24) voidCall -> ID OPAREN . paramCall CPAREN EOF
    (21) paramCall -> . ID
    (22) paramCall -> . ID COMMA paramCall
    (23) paramCall -> . epsilon
    (100) epsilon -> .

    ID              shift and go to state 102
    CPAREN          reduce using rule 100 (epsilon -> .)

    paramCall                      shift and go to state 103
    epsilon                        shift and go to state 104

state 84

    (85) classCall -> ID MONEY . ID OPAREN paramCall CPAREN EOF

    ID              shift and go to state 105


state 85

    (97) input -> INPUT OPAREN . ID CPAREN EOF

    ID              shift and go to state 106


state 86

    (98) output -> OUTPUT OPAREN . expRelational CPAREN EOF
    (54) expRelational -> . plusMinus
    (55) expRelational -> . plusMinus opRelational expRelational pointCheckOpRel
    (63) plusMinus -> . multDiv pointCheckPlusMinus
    (64) plusMinus -> . multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus
    (65) plusMinus -> . multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus
    (68) multDiv -> . expParen pointCheckMultDiv
    (69) multDiv -> . expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> . expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (73) expParen -> . OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (74) expParen -> . varCte
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    expRelational                  shift and go to state 108
    plusMinus                      shift and go to state 109
    multDiv                        shift and go to state 110
    expParen                       shift and go to state 111
    varCte                         shift and go to state 112

state 87

    (94) whileCycle -> WHILE OPAREN . expRelational CPAREN OBRACKET body CBRACKET
    (54) expRelational -> . plusMinus
    (55) expRelational -> . plusMinus opRelational expRelational pointCheckOpRel
    (63) plusMinus -> . multDiv pointCheckPlusMinus
    (64) plusMinus -> . multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus
    (65) plusMinus -> . multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus
    (68) multDiv -> . expParen pointCheckMultDiv
    (69) multDiv -> . expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> . expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (73) expParen -> . OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (74) expParen -> . varCte
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    expRelational                  shift and go to state 117
    plusMinus                      shift and go to state 109
    multDiv                        shift and go to state 110
    expParen                       shift and go to state 111
    varCte                         shift and go to state 112

state 88

    (95) ifCond -> IF OPAREN . expRelational CPAREN OBRACKET body CBRACKET
    (54) expRelational -> . plusMinus
    (55) expRelational -> . plusMinus opRelational expRelational pointCheckOpRel
    (63) plusMinus -> . multDiv pointCheckPlusMinus
    (64) plusMinus -> . multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus
    (65) plusMinus -> . multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus
    (68) multDiv -> . expParen pointCheckMultDiv
    (69) multDiv -> . expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> . expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (73) expParen -> . OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (74) expParen -> . varCte
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    expRelational                  shift and go to state 118
    plusMinus                      shift and go to state 109
    multDiv                        shift and go to state 110
    expParen                       shift and go to state 111
    varCte                         shift and go to state 112

state 89

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN . OBRACKET body CBRACKET fxDef

    OBRACKET        shift and go to state 119


state 90

    (13) param -> paramType ID . pointParam
    (14) param -> paramType ID . pointParam COMMA param
    (20) pointParam -> .

    COMMA           reduce using rule 20 (pointParam -> .)
    CPAREN          reduce using rule 20 (pointParam -> .)

    pointParam                     shift and go to state 120

state 91

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN . OBRACKET body RETURN ID EOF CBRACKET fxDef

    OBRACKET        shift and go to state 121


state 92

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS . COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef

    COLON           shift and go to state 122


state 93

    (80) pointAtt -> varsDef pointAtt .

    METHODS         reduce using rule 80 (pointAtt -> varsDef pointAtt .)


state 94

    (35) varsDef -> VAR objType var . EOF

    EOF             shift and go to state 123


state 95

    (41) var -> varsType .
    (42) var -> varsType . COMMA var

    EOF             reduce using rule 41 (var -> varsType .)
    COMMA           shift and go to state 124


state 96

    (43) varsType -> ID .
    (46) arrDef -> ID . OSQUAREBR varCte CSQUAREBR

    COMMA           reduce using rule 43 (varsType -> ID .)
    EOF             reduce using rule 43 (varsType -> ID .)
    OSQUAREBR       shift and go to state 125


state 97

    (44) varsType -> arrDef .
    (47) matrixDef -> arrDef . OSQUAREBR varCte CSQUAREBR

    COMMA           reduce using rule 44 (varsType -> arrDef .)
    EOF             reduce using rule 44 (varsType -> arrDef .)
    OSQUAREBR       shift and go to state 126


state 98

    (45) varsType -> matrixDef .

    COMMA           reduce using rule 45 (varsType -> matrixDef .)
    EOF             reduce using rule 45 (varsType -> matrixDef .)


state 99

    (36) varsDef -> VAR varSimpleType var . EOF

    EOF             shift and go to state 127


state 100

    (96) ifCond -> ifCond ELSE OBRACKET . body CBRACKET
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (100) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT pointPushAssignment expAssignment
    (97) input -> . INPUT OPAREN ID CPAREN EOF
    (98) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (94) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (95) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (96) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (85) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 100 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    ifCond                         shift and go to state 54
    body                           shift and go to state 128
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    classCall                      shift and go to state 55

state 101

    (48) assignmentDef -> ID ASSIGNMENT pointPushAssignment . expAssignment
    (50) expAssignment -> . expRelational EOF
    (51) expAssignment -> . returnCall EOF
    (52) expAssignment -> . classCall
    (54) expRelational -> . plusMinus
    (55) expRelational -> . plusMinus opRelational expRelational pointCheckOpRel
    (53) returnCall -> . ID OPAREN paramCall CPAREN
    (85) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF
    (63) plusMinus -> . multDiv pointCheckPlusMinus
    (64) plusMinus -> . multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus
    (65) plusMinus -> . multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus
    (68) multDiv -> . expParen pointCheckMultDiv
    (69) multDiv -> . expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> . expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (73) expParen -> . OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (74) expParen -> . varCte
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    ID              shift and go to state 129
    OPAREN          shift and go to state 107
    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115

    expAssignment                  shift and go to state 130
    expRelational                  shift and go to state 131
    returnCall                     shift and go to state 132
    classCall                      shift and go to state 133
    plusMinus                      shift and go to state 109
    multDiv                        shift and go to state 110
    expParen                       shift and go to state 111
    varCte                         shift and go to state 112

state 102

    (21) paramCall -> ID .
    (22) paramCall -> ID . COMMA paramCall

    CPAREN          reduce using rule 21 (paramCall -> ID .)
    COMMA           shift and go to state 134


state 103

    (24) voidCall -> ID OPAREN paramCall . CPAREN EOF

    CPAREN          shift and go to state 135


state 104

    (23) paramCall -> epsilon .

    CPAREN          reduce using rule 23 (paramCall -> epsilon .)


state 105

    (85) classCall -> ID MONEY ID . OPAREN paramCall CPAREN EOF

    OPAREN          shift and go to state 136


state 106

    (97) input -> INPUT OPAREN ID . CPAREN EOF

    CPAREN          shift and go to state 137


state 107

    (73) expParen -> OPAREN . pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (75) pointFakeBackground -> .

    OPAREN          reduce using rule 75 (pointFakeBackground -> .)
    INT             reduce using rule 75 (pointFakeBackground -> .)
    DEC             reduce using rule 75 (pointFakeBackground -> .)
    STRING          reduce using rule 75 (pointFakeBackground -> .)
    ID              reduce using rule 75 (pointFakeBackground -> .)

    pointFakeBackground            shift and go to state 138

state 108

    (98) output -> OUTPUT OPAREN expRelational . CPAREN EOF

    CPAREN          shift and go to state 139


state 109

    (54) expRelational -> plusMinus .
    (55) expRelational -> plusMinus . opRelational expRelational pointCheckOpRel
    (57) opRelational -> . EQUAL
    (58) opRelational -> . DIFFERENT
    (59) opRelational -> . GREATERTHAN
    (60) opRelational -> . GREATERTHANEQ
    (61) opRelational -> . LESSTHAN
    (62) opRelational -> . LESSTHANEQ

    CPAREN          reduce using rule 54 (expRelational -> plusMinus .)
    EOF             reduce using rule 54 (expRelational -> plusMinus .)
    EQUAL           shift and go to state 141
    DIFFERENT       shift and go to state 142
    GREATERTHAN     shift and go to state 143
    GREATERTHANEQ   shift and go to state 144
    LESSTHAN        shift and go to state 145
    LESSTHANEQ      shift and go to state 146

    opRelational                   shift and go to state 140

state 110

    (63) plusMinus -> multDiv . pointCheckPlusMinus
    (64) plusMinus -> multDiv . pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus
    (65) plusMinus -> multDiv . pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus
    (66) pointCheckPlusMinus -> .

    PLUS            reduce using rule 66 (pointCheckPlusMinus -> .)
    MINUS           reduce using rule 66 (pointCheckPlusMinus -> .)
    EQUAL           reduce using rule 66 (pointCheckPlusMinus -> .)
    DIFFERENT       reduce using rule 66 (pointCheckPlusMinus -> .)
    GREATERTHAN     reduce using rule 66 (pointCheckPlusMinus -> .)
    GREATERTHANEQ   reduce using rule 66 (pointCheckPlusMinus -> .)
    LESSTHAN        reduce using rule 66 (pointCheckPlusMinus -> .)
    LESSTHANEQ      reduce using rule 66 (pointCheckPlusMinus -> .)
    CPAREN          reduce using rule 66 (pointCheckPlusMinus -> .)
    EOF             reduce using rule 66 (pointCheckPlusMinus -> .)

    pointCheckPlusMinus            shift and go to state 147

state 111

    (68) multDiv -> expParen . pointCheckMultDiv
    (69) multDiv -> expParen . pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> expParen . pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (71) pointCheckMultDiv -> .

    MULTIPLY        reduce using rule 71 (pointCheckMultDiv -> .)
    DIVIDE          reduce using rule 71 (pointCheckMultDiv -> .)
    PLUS            reduce using rule 71 (pointCheckMultDiv -> .)
    MINUS           reduce using rule 71 (pointCheckMultDiv -> .)
    EQUAL           reduce using rule 71 (pointCheckMultDiv -> .)
    DIFFERENT       reduce using rule 71 (pointCheckMultDiv -> .)
    GREATERTHAN     reduce using rule 71 (pointCheckMultDiv -> .)
    GREATERTHANEQ   reduce using rule 71 (pointCheckMultDiv -> .)
    LESSTHAN        reduce using rule 71 (pointCheckMultDiv -> .)
    LESSTHANEQ      reduce using rule 71 (pointCheckMultDiv -> .)
    CPAREN          reduce using rule 71 (pointCheckMultDiv -> .)
    EOF             reduce using rule 71 (pointCheckMultDiv -> .)

    pointCheckMultDiv              shift and go to state 148

state 112

    (74) expParen -> varCte .

    MULTIPLY        reduce using rule 74 (expParen -> varCte .)
    DIVIDE          reduce using rule 74 (expParen -> varCte .)
    PLUS            reduce using rule 74 (expParen -> varCte .)
    MINUS           reduce using rule 74 (expParen -> varCte .)
    EQUAL           reduce using rule 74 (expParen -> varCte .)
    DIFFERENT       reduce using rule 74 (expParen -> varCte .)
    GREATERTHAN     reduce using rule 74 (expParen -> varCte .)
    GREATERTHANEQ   reduce using rule 74 (expParen -> varCte .)
    LESSTHAN        reduce using rule 74 (expParen -> varCte .)
    LESSTHANEQ      reduce using rule 74 (expParen -> varCte .)
    CPAREN          reduce using rule 74 (expParen -> varCte .)
    EOF             reduce using rule 74 (expParen -> varCte .)


state 113

    (87) varCte -> INT . pointINT
    (91) pointINT -> .

    MULTIPLY        reduce using rule 91 (pointINT -> .)
    DIVIDE          reduce using rule 91 (pointINT -> .)
    PLUS            reduce using rule 91 (pointINT -> .)
    MINUS           reduce using rule 91 (pointINT -> .)
    EQUAL           reduce using rule 91 (pointINT -> .)
    DIFFERENT       reduce using rule 91 (pointINT -> .)
    GREATERTHAN     reduce using rule 91 (pointINT -> .)
    GREATERTHANEQ   reduce using rule 91 (pointINT -> .)
    LESSTHAN        reduce using rule 91 (pointINT -> .)
    LESSTHANEQ      reduce using rule 91 (pointINT -> .)
    CPAREN          reduce using rule 91 (pointINT -> .)
    EOF             reduce using rule 91 (pointINT -> .)
    CSQUAREBR       reduce using rule 91 (pointINT -> .)

    pointINT                       shift and go to state 149

state 114

    (88) varCte -> DEC . pointDEC
    (92) pointDEC -> .

    MULTIPLY        reduce using rule 92 (pointDEC -> .)
    DIVIDE          reduce using rule 92 (pointDEC -> .)
    PLUS            reduce using rule 92 (pointDEC -> .)
    MINUS           reduce using rule 92 (pointDEC -> .)
    EQUAL           reduce using rule 92 (pointDEC -> .)
    DIFFERENT       reduce using rule 92 (pointDEC -> .)
    GREATERTHAN     reduce using rule 92 (pointDEC -> .)
    GREATERTHANEQ   reduce using rule 92 (pointDEC -> .)
    LESSTHAN        reduce using rule 92 (pointDEC -> .)
    LESSTHANEQ      reduce using rule 92 (pointDEC -> .)
    CPAREN          reduce using rule 92 (pointDEC -> .)
    EOF             reduce using rule 92 (pointDEC -> .)
    CSQUAREBR       reduce using rule 92 (pointDEC -> .)

    pointDEC                       shift and go to state 150

state 115

    (89) varCte -> STRING . pointSTRING
    (93) pointSTRING -> .

    MULTIPLY        reduce using rule 93 (pointSTRING -> .)
    DIVIDE          reduce using rule 93 (pointSTRING -> .)
    PLUS            reduce using rule 93 (pointSTRING -> .)
    MINUS           reduce using rule 93 (pointSTRING -> .)
    EQUAL           reduce using rule 93 (pointSTRING -> .)
    DIFFERENT       reduce using rule 93 (pointSTRING -> .)
    GREATERTHAN     reduce using rule 93 (pointSTRING -> .)
    GREATERTHANEQ   reduce using rule 93 (pointSTRING -> .)
    LESSTHAN        reduce using rule 93 (pointSTRING -> .)
    LESSTHANEQ      reduce using rule 93 (pointSTRING -> .)
    CPAREN          reduce using rule 93 (pointSTRING -> .)
    EOF             reduce using rule 93 (pointSTRING -> .)
    CSQUAREBR       reduce using rule 93 (pointSTRING -> .)

    pointSTRING                    shift and go to state 151

state 116

    (90) varCte -> ID .

    MULTIPLY        reduce using rule 90 (varCte -> ID .)
    DIVIDE          reduce using rule 90 (varCte -> ID .)
    PLUS            reduce using rule 90 (varCte -> ID .)
    MINUS           reduce using rule 90 (varCte -> ID .)
    EQUAL           reduce using rule 90 (varCte -> ID .)
    DIFFERENT       reduce using rule 90 (varCte -> ID .)
    GREATERTHAN     reduce using rule 90 (varCte -> ID .)
    GREATERTHANEQ   reduce using rule 90 (varCte -> ID .)
    LESSTHAN        reduce using rule 90 (varCte -> ID .)
    LESSTHANEQ      reduce using rule 90 (varCte -> ID .)
    CPAREN          reduce using rule 90 (varCte -> ID .)
    CSQUAREBR       reduce using rule 90 (varCte -> ID .)
    EOF             reduce using rule 90 (varCte -> ID .)


state 117

    (94) whileCycle -> WHILE OPAREN expRelational . CPAREN OBRACKET body CBRACKET

    CPAREN          shift and go to state 152


state 118

    (95) ifCond -> IF OPAREN expRelational . CPAREN OBRACKET body CBRACKET

    CPAREN          shift and go to state 153


state 119

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET . body CBRACKET fxDef
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (100) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT pointPushAssignment expAssignment
    (97) input -> . INPUT OPAREN ID CPAREN EOF
    (98) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (94) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (95) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (96) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (85) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 100 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    body                           shift and go to state 154
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 120

    (13) param -> paramType ID pointParam .
    (14) param -> paramType ID pointParam . COMMA param

    CPAREN          reduce using rule 13 (param -> paramType ID pointParam .)
    COMMA           shift and go to state 155


state 121

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET . body RETURN ID EOF CBRACKET fxDef
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (100) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT pointPushAssignment expAssignment
    (97) input -> . INPUT OPAREN ID CPAREN EOF
    (98) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (94) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (95) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (96) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (85) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    RETURN          reduce using rule 100 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    body                           shift and go to state 156
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 122

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON . pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (81) pointScopeClass -> .

    VOID            reduce using rule 81 (pointScopeClass -> .)
    INT             reduce using rule 81 (pointScopeClass -> .)
    STRING          reduce using rule 81 (pointScopeClass -> .)
    DEC             reduce using rule 81 (pointScopeClass -> .)
    BOOL            reduce using rule 81 (pointScopeClass -> .)
    CBRACKET        reduce using rule 81 (pointScopeClass -> .)

    pointScopeClass                shift and go to state 157

state 123

    (35) varsDef -> VAR objType var EOF .

    VAR             reduce using rule 35 (varsDef -> VAR objType var EOF .)
    ID              reduce using rule 35 (varsDef -> VAR objType var EOF .)
    INPUT           reduce using rule 35 (varsDef -> VAR objType var EOF .)
    OUTPUT          reduce using rule 35 (varsDef -> VAR objType var EOF .)
    WHILE           reduce using rule 35 (varsDef -> VAR objType var EOF .)
    IF              reduce using rule 35 (varsDef -> VAR objType var EOF .)
    CBRACKET        reduce using rule 35 (varsDef -> VAR objType var EOF .)
    METHODS         reduce using rule 35 (varsDef -> VAR objType var EOF .)
    RETURN          reduce using rule 35 (varsDef -> VAR objType var EOF .)


state 124

    (42) var -> varsType COMMA . var
    (41) var -> . varsType
    (42) var -> . varsType COMMA var
    (43) varsType -> . ID
    (44) varsType -> . arrDef
    (45) varsType -> . matrixDef
    (46) arrDef -> . ID OSQUAREBR varCte CSQUAREBR
    (47) matrixDef -> . arrDef OSQUAREBR varCte CSQUAREBR

    ID              shift and go to state 96

    varsType                       shift and go to state 95
    var                            shift and go to state 158
    arrDef                         shift and go to state 97
    matrixDef                      shift and go to state 98

state 125

    (46) arrDef -> ID OSQUAREBR . varCte CSQUAREBR
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    varCte                         shift and go to state 159

state 126

    (47) matrixDef -> arrDef OSQUAREBR . varCte CSQUAREBR
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    varCte                         shift and go to state 160

state 127

    (36) varsDef -> VAR varSimpleType var EOF .

    VAR             reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    ID              reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    INPUT           reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    OUTPUT          reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    WHILE           reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    IF              reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    CBRACKET        reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    METHODS         reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)
    RETURN          reduce using rule 36 (varsDef -> VAR varSimpleType var EOF .)


state 128

    (96) ifCond -> ifCond ELSE OBRACKET body . CBRACKET

    CBRACKET        shift and go to state 161


state 129

    (53) returnCall -> ID . OPAREN paramCall CPAREN
    (85) classCall -> ID . MONEY ID OPAREN paramCall CPAREN EOF
    (90) varCte -> ID .

    OPAREN          shift and go to state 162
    MONEY           shift and go to state 84
    MULTIPLY        reduce using rule 90 (varCte -> ID .)
    DIVIDE          reduce using rule 90 (varCte -> ID .)
    PLUS            reduce using rule 90 (varCte -> ID .)
    MINUS           reduce using rule 90 (varCte -> ID .)
    EQUAL           reduce using rule 90 (varCte -> ID .)
    DIFFERENT       reduce using rule 90 (varCte -> ID .)
    GREATERTHAN     reduce using rule 90 (varCte -> ID .)
    GREATERTHANEQ   reduce using rule 90 (varCte -> ID .)
    LESSTHAN        reduce using rule 90 (varCte -> ID .)
    LESSTHANEQ      reduce using rule 90 (varCte -> ID .)
    EOF             reduce using rule 90 (varCte -> ID .)


state 130

    (48) assignmentDef -> ID ASSIGNMENT pointPushAssignment expAssignment .

    VAR             reduce using rule 48 (assignmentDef -> ID ASSIGNMENT pointPushAssignment expAssignment .)
    ID              reduce using rule 48 (assignmentDef -> ID ASSIGNMENT pointPushAssignment expAssignment .)
    INPUT           reduce using rule 48 (assignmentDef -> ID ASSIGNMENT pointPushAssignment expAssignment .)
    OUTPUT          reduce using rule 48 (assignmentDef -> ID ASSIGNMENT pointPushAssignment expAssignment .)
    WHILE           reduce using rule 48 (assignmentDef -> ID ASSIGNMENT pointPushAssignment expAssignment .)
    IF              reduce using rule 48 (assignmentDef -> ID ASSIGNMENT pointPushAssignment expAssignment .)
    CBRACKET        reduce using rule 48 (assignmentDef -> ID ASSIGNMENT pointPushAssignment expAssignment .)
    RETURN          reduce using rule 48 (assignmentDef -> ID ASSIGNMENT pointPushAssignment expAssignment .)


state 131

    (50) expAssignment -> expRelational . EOF

    EOF             shift and go to state 163


state 132

    (51) expAssignment -> returnCall . EOF

    EOF             shift and go to state 164


state 133

    (52) expAssignment -> classCall .

    VAR             reduce using rule 52 (expAssignment -> classCall .)
    ID              reduce using rule 52 (expAssignment -> classCall .)
    INPUT           reduce using rule 52 (expAssignment -> classCall .)
    OUTPUT          reduce using rule 52 (expAssignment -> classCall .)
    WHILE           reduce using rule 52 (expAssignment -> classCall .)
    IF              reduce using rule 52 (expAssignment -> classCall .)
    CBRACKET        reduce using rule 52 (expAssignment -> classCall .)
    RETURN          reduce using rule 52 (expAssignment -> classCall .)


state 134

    (22) paramCall -> ID COMMA . paramCall
    (21) paramCall -> . ID
    (22) paramCall -> . ID COMMA paramCall
    (23) paramCall -> . epsilon
    (100) epsilon -> .

    ID              shift and go to state 102
    CPAREN          reduce using rule 100 (epsilon -> .)

    paramCall                      shift and go to state 165
    epsilon                        shift and go to state 104

state 135

    (24) voidCall -> ID OPAREN paramCall CPAREN . EOF

    EOF             shift and go to state 166


state 136

    (85) classCall -> ID MONEY ID OPAREN . paramCall CPAREN EOF
    (21) paramCall -> . ID
    (22) paramCall -> . ID COMMA paramCall
    (23) paramCall -> . epsilon
    (100) epsilon -> .

    ID              shift and go to state 102
    CPAREN          reduce using rule 100 (epsilon -> .)

    paramCall                      shift and go to state 167
    epsilon                        shift and go to state 104

state 137

    (97) input -> INPUT OPAREN ID CPAREN . EOF

    EOF             shift and go to state 168


state 138

    (73) expParen -> OPAREN pointFakeBackground . expRelational CPAREN pointRemoveFakeBackground
    (54) expRelational -> . plusMinus
    (55) expRelational -> . plusMinus opRelational expRelational pointCheckOpRel
    (63) plusMinus -> . multDiv pointCheckPlusMinus
    (64) plusMinus -> . multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus
    (65) plusMinus -> . multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus
    (68) multDiv -> . expParen pointCheckMultDiv
    (69) multDiv -> . expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> . expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (73) expParen -> . OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (74) expParen -> . varCte
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    expRelational                  shift and go to state 169
    plusMinus                      shift and go to state 109
    multDiv                        shift and go to state 110
    expParen                       shift and go to state 111
    varCte                         shift and go to state 112

state 139

    (98) output -> OUTPUT OPAREN expRelational CPAREN . EOF

    EOF             shift and go to state 170


state 140

    (55) expRelational -> plusMinus opRelational . expRelational pointCheckOpRel
    (54) expRelational -> . plusMinus
    (55) expRelational -> . plusMinus opRelational expRelational pointCheckOpRel
    (63) plusMinus -> . multDiv pointCheckPlusMinus
    (64) plusMinus -> . multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus
    (65) plusMinus -> . multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus
    (68) multDiv -> . expParen pointCheckMultDiv
    (69) multDiv -> . expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> . expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (73) expParen -> . OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (74) expParen -> . varCte
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    plusMinus                      shift and go to state 109
    expRelational                  shift and go to state 171
    multDiv                        shift and go to state 110
    expParen                       shift and go to state 111
    varCte                         shift and go to state 112

state 141

    (57) opRelational -> EQUAL .

    OPAREN          reduce using rule 57 (opRelational -> EQUAL .)
    INT             reduce using rule 57 (opRelational -> EQUAL .)
    DEC             reduce using rule 57 (opRelational -> EQUAL .)
    STRING          reduce using rule 57 (opRelational -> EQUAL .)
    ID              reduce using rule 57 (opRelational -> EQUAL .)


state 142

    (58) opRelational -> DIFFERENT .

    OPAREN          reduce using rule 58 (opRelational -> DIFFERENT .)
    INT             reduce using rule 58 (opRelational -> DIFFERENT .)
    DEC             reduce using rule 58 (opRelational -> DIFFERENT .)
    STRING          reduce using rule 58 (opRelational -> DIFFERENT .)
    ID              reduce using rule 58 (opRelational -> DIFFERENT .)


state 143

    (59) opRelational -> GREATERTHAN .

    OPAREN          reduce using rule 59 (opRelational -> GREATERTHAN .)
    INT             reduce using rule 59 (opRelational -> GREATERTHAN .)
    DEC             reduce using rule 59 (opRelational -> GREATERTHAN .)
    STRING          reduce using rule 59 (opRelational -> GREATERTHAN .)
    ID              reduce using rule 59 (opRelational -> GREATERTHAN .)


state 144

    (60) opRelational -> GREATERTHANEQ .

    OPAREN          reduce using rule 60 (opRelational -> GREATERTHANEQ .)
    INT             reduce using rule 60 (opRelational -> GREATERTHANEQ .)
    DEC             reduce using rule 60 (opRelational -> GREATERTHANEQ .)
    STRING          reduce using rule 60 (opRelational -> GREATERTHANEQ .)
    ID              reduce using rule 60 (opRelational -> GREATERTHANEQ .)


state 145

    (61) opRelational -> LESSTHAN .

    OPAREN          reduce using rule 61 (opRelational -> LESSTHAN .)
    INT             reduce using rule 61 (opRelational -> LESSTHAN .)
    DEC             reduce using rule 61 (opRelational -> LESSTHAN .)
    STRING          reduce using rule 61 (opRelational -> LESSTHAN .)
    ID              reduce using rule 61 (opRelational -> LESSTHAN .)


state 146

    (62) opRelational -> LESSTHANEQ .

    OPAREN          reduce using rule 62 (opRelational -> LESSTHANEQ .)
    INT             reduce using rule 62 (opRelational -> LESSTHANEQ .)
    DEC             reduce using rule 62 (opRelational -> LESSTHANEQ .)
    STRING          reduce using rule 62 (opRelational -> LESSTHANEQ .)
    ID              reduce using rule 62 (opRelational -> LESSTHANEQ .)


state 147

    (63) plusMinus -> multDiv pointCheckPlusMinus .
    (64) plusMinus -> multDiv pointCheckPlusMinus . PLUS pointPushPlusMinus plusMinus
    (65) plusMinus -> multDiv pointCheckPlusMinus . MINUS pointPushPlusMinus plusMinus

    EQUAL           reduce using rule 63 (plusMinus -> multDiv pointCheckPlusMinus .)
    DIFFERENT       reduce using rule 63 (plusMinus -> multDiv pointCheckPlusMinus .)
    GREATERTHAN     reduce using rule 63 (plusMinus -> multDiv pointCheckPlusMinus .)
    GREATERTHANEQ   reduce using rule 63 (plusMinus -> multDiv pointCheckPlusMinus .)
    LESSTHAN        reduce using rule 63 (plusMinus -> multDiv pointCheckPlusMinus .)
    LESSTHANEQ      reduce using rule 63 (plusMinus -> multDiv pointCheckPlusMinus .)
    CPAREN          reduce using rule 63 (plusMinus -> multDiv pointCheckPlusMinus .)
    EOF             reduce using rule 63 (plusMinus -> multDiv pointCheckPlusMinus .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173


state 148

    (68) multDiv -> expParen pointCheckMultDiv .
    (69) multDiv -> expParen pointCheckMultDiv . MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> expParen pointCheckMultDiv . DIVIDE pointPushMultDiv multDiv

    PLUS            reduce using rule 68 (multDiv -> expParen pointCheckMultDiv .)
    MINUS           reduce using rule 68 (multDiv -> expParen pointCheckMultDiv .)
    EQUAL           reduce using rule 68 (multDiv -> expParen pointCheckMultDiv .)
    DIFFERENT       reduce using rule 68 (multDiv -> expParen pointCheckMultDiv .)
    GREATERTHAN     reduce using rule 68 (multDiv -> expParen pointCheckMultDiv .)
    GREATERTHANEQ   reduce using rule 68 (multDiv -> expParen pointCheckMultDiv .)
    LESSTHAN        reduce using rule 68 (multDiv -> expParen pointCheckMultDiv .)
    LESSTHANEQ      reduce using rule 68 (multDiv -> expParen pointCheckMultDiv .)
    CPAREN          reduce using rule 68 (multDiv -> expParen pointCheckMultDiv .)
    EOF             reduce using rule 68 (multDiv -> expParen pointCheckMultDiv .)
    MULTIPLY        shift and go to state 174
    DIVIDE          shift and go to state 175


state 149

    (87) varCte -> INT pointINT .

    MULTIPLY        reduce using rule 87 (varCte -> INT pointINT .)
    DIVIDE          reduce using rule 87 (varCte -> INT pointINT .)
    PLUS            reduce using rule 87 (varCte -> INT pointINT .)
    MINUS           reduce using rule 87 (varCte -> INT pointINT .)
    EQUAL           reduce using rule 87 (varCte -> INT pointINT .)
    DIFFERENT       reduce using rule 87 (varCte -> INT pointINT .)
    GREATERTHAN     reduce using rule 87 (varCte -> INT pointINT .)
    GREATERTHANEQ   reduce using rule 87 (varCte -> INT pointINT .)
    LESSTHAN        reduce using rule 87 (varCte -> INT pointINT .)
    LESSTHANEQ      reduce using rule 87 (varCte -> INT pointINT .)
    CPAREN          reduce using rule 87 (varCte -> INT pointINT .)
    EOF             reduce using rule 87 (varCte -> INT pointINT .)
    CSQUAREBR       reduce using rule 87 (varCte -> INT pointINT .)


state 150

    (88) varCte -> DEC pointDEC .

    MULTIPLY        reduce using rule 88 (varCte -> DEC pointDEC .)
    DIVIDE          reduce using rule 88 (varCte -> DEC pointDEC .)
    PLUS            reduce using rule 88 (varCte -> DEC pointDEC .)
    MINUS           reduce using rule 88 (varCte -> DEC pointDEC .)
    EQUAL           reduce using rule 88 (varCte -> DEC pointDEC .)
    DIFFERENT       reduce using rule 88 (varCte -> DEC pointDEC .)
    GREATERTHAN     reduce using rule 88 (varCte -> DEC pointDEC .)
    GREATERTHANEQ   reduce using rule 88 (varCte -> DEC pointDEC .)
    LESSTHAN        reduce using rule 88 (varCte -> DEC pointDEC .)
    LESSTHANEQ      reduce using rule 88 (varCte -> DEC pointDEC .)
    CPAREN          reduce using rule 88 (varCte -> DEC pointDEC .)
    EOF             reduce using rule 88 (varCte -> DEC pointDEC .)
    CSQUAREBR       reduce using rule 88 (varCte -> DEC pointDEC .)


state 151

    (89) varCte -> STRING pointSTRING .

    MULTIPLY        reduce using rule 89 (varCte -> STRING pointSTRING .)
    DIVIDE          reduce using rule 89 (varCte -> STRING pointSTRING .)
    PLUS            reduce using rule 89 (varCte -> STRING pointSTRING .)
    MINUS           reduce using rule 89 (varCte -> STRING pointSTRING .)
    EQUAL           reduce using rule 89 (varCte -> STRING pointSTRING .)
    DIFFERENT       reduce using rule 89 (varCte -> STRING pointSTRING .)
    GREATERTHAN     reduce using rule 89 (varCte -> STRING pointSTRING .)
    GREATERTHANEQ   reduce using rule 89 (varCte -> STRING pointSTRING .)
    LESSTHAN        reduce using rule 89 (varCte -> STRING pointSTRING .)
    LESSTHANEQ      reduce using rule 89 (varCte -> STRING pointSTRING .)
    CPAREN          reduce using rule 89 (varCte -> STRING pointSTRING .)
    EOF             reduce using rule 89 (varCte -> STRING pointSTRING .)
    CSQUAREBR       reduce using rule 89 (varCte -> STRING pointSTRING .)


state 152

    (94) whileCycle -> WHILE OPAREN expRelational CPAREN . OBRACKET body CBRACKET

    OBRACKET        shift and go to state 176


state 153

    (95) ifCond -> IF OPAREN expRelational CPAREN . OBRACKET body CBRACKET

    OBRACKET        shift and go to state 177


state 154

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body . CBRACKET fxDef

    CBRACKET        shift and go to state 178


state 155

    (14) param -> paramType ID pointParam COMMA . param
    (13) param -> . paramType ID pointParam
    (14) param -> . paramType ID pointParam COMMA param
    (15) param -> . epsilon
    (16) paramType -> . INT
    (17) paramType -> . STRING
    (18) paramType -> . DEC
    (19) paramType -> . BOOL
    (100) epsilon -> .

    INT             shift and go to state 64
    STRING          shift and go to state 65
    DEC             shift and go to state 66
    BOOL            shift and go to state 67
    CPAREN          reduce using rule 100 (epsilon -> .)

    paramType                      shift and go to state 62
    param                          shift and go to state 179
    epsilon                        shift and go to state 63

state 156

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body . RETURN ID EOF CBRACKET fxDef

    RETURN          shift and go to state 180


state 157

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass . fxDef pointScopeClass2 CBRACKET classDef
    (4) fxDef -> . VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (5) fxDef -> . fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (6) fxDef -> . epsilon
    (7) fxType -> . INT
    (8) fxType -> . STRING
    (9) fxType -> . DEC
    (10) fxType -> . BOOL
    (100) epsilon -> .

    VOID            shift and go to state 10
    INT             shift and go to state 13
    STRING          shift and go to state 14
    DEC             shift and go to state 15
    BOOL            shift and go to state 16
    CBRACKET        reduce using rule 100 (epsilon -> .)

    fxDef                          shift and go to state 181
    fxType                         shift and go to state 11
    epsilon                        shift and go to state 12

state 158

    (42) var -> varsType COMMA var .

    EOF             reduce using rule 42 (var -> varsType COMMA var .)


state 159

    (46) arrDef -> ID OSQUAREBR varCte . CSQUAREBR

    CSQUAREBR       shift and go to state 182


state 160

    (47) matrixDef -> arrDef OSQUAREBR varCte . CSQUAREBR

    CSQUAREBR       shift and go to state 183


state 161

    (96) ifCond -> ifCond ELSE OBRACKET body CBRACKET .

    ELSE            reduce using rule 96 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    VAR             reduce using rule 96 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    ID              reduce using rule 96 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    INPUT           reduce using rule 96 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    OUTPUT          reduce using rule 96 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    WHILE           reduce using rule 96 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    IF              reduce using rule 96 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    CBRACKET        reduce using rule 96 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)
    RETURN          reduce using rule 96 (ifCond -> ifCond ELSE OBRACKET body CBRACKET .)


state 162

    (53) returnCall -> ID OPAREN . paramCall CPAREN
    (21) paramCall -> . ID
    (22) paramCall -> . ID COMMA paramCall
    (23) paramCall -> . epsilon
    (100) epsilon -> .

    ID              shift and go to state 102
    CPAREN          reduce using rule 100 (epsilon -> .)

    paramCall                      shift and go to state 184
    epsilon                        shift and go to state 104

state 163

    (50) expAssignment -> expRelational EOF .

    VAR             reduce using rule 50 (expAssignment -> expRelational EOF .)
    ID              reduce using rule 50 (expAssignment -> expRelational EOF .)
    INPUT           reduce using rule 50 (expAssignment -> expRelational EOF .)
    OUTPUT          reduce using rule 50 (expAssignment -> expRelational EOF .)
    WHILE           reduce using rule 50 (expAssignment -> expRelational EOF .)
    IF              reduce using rule 50 (expAssignment -> expRelational EOF .)
    CBRACKET        reduce using rule 50 (expAssignment -> expRelational EOF .)
    RETURN          reduce using rule 50 (expAssignment -> expRelational EOF .)


state 164

    (51) expAssignment -> returnCall EOF .

    VAR             reduce using rule 51 (expAssignment -> returnCall EOF .)
    ID              reduce using rule 51 (expAssignment -> returnCall EOF .)
    INPUT           reduce using rule 51 (expAssignment -> returnCall EOF .)
    OUTPUT          reduce using rule 51 (expAssignment -> returnCall EOF .)
    WHILE           reduce using rule 51 (expAssignment -> returnCall EOF .)
    IF              reduce using rule 51 (expAssignment -> returnCall EOF .)
    CBRACKET        reduce using rule 51 (expAssignment -> returnCall EOF .)
    RETURN          reduce using rule 51 (expAssignment -> returnCall EOF .)


state 165

    (22) paramCall -> ID COMMA paramCall .

    CPAREN          reduce using rule 22 (paramCall -> ID COMMA paramCall .)


state 166

    (24) voidCall -> ID OPAREN paramCall CPAREN EOF .

    VAR             reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    ID              reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    INPUT           reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    OUTPUT          reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    WHILE           reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    IF              reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    CBRACKET        reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)
    RETURN          reduce using rule 24 (voidCall -> ID OPAREN paramCall CPAREN EOF .)


state 167

    (85) classCall -> ID MONEY ID OPAREN paramCall . CPAREN EOF

    CPAREN          shift and go to state 185


state 168

    (97) input -> INPUT OPAREN ID CPAREN EOF .

    VAR             reduce using rule 97 (input -> INPUT OPAREN ID CPAREN EOF .)
    ID              reduce using rule 97 (input -> INPUT OPAREN ID CPAREN EOF .)
    INPUT           reduce using rule 97 (input -> INPUT OPAREN ID CPAREN EOF .)
    OUTPUT          reduce using rule 97 (input -> INPUT OPAREN ID CPAREN EOF .)
    WHILE           reduce using rule 97 (input -> INPUT OPAREN ID CPAREN EOF .)
    IF              reduce using rule 97 (input -> INPUT OPAREN ID CPAREN EOF .)
    CBRACKET        reduce using rule 97 (input -> INPUT OPAREN ID CPAREN EOF .)
    RETURN          reduce using rule 97 (input -> INPUT OPAREN ID CPAREN EOF .)


state 169

    (73) expParen -> OPAREN pointFakeBackground expRelational . CPAREN pointRemoveFakeBackground

    CPAREN          shift and go to state 186


state 170

    (98) output -> OUTPUT OPAREN expRelational CPAREN EOF .

    VAR             reduce using rule 98 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    ID              reduce using rule 98 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    INPUT           reduce using rule 98 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    OUTPUT          reduce using rule 98 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    WHILE           reduce using rule 98 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    IF              reduce using rule 98 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    CBRACKET        reduce using rule 98 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)
    RETURN          reduce using rule 98 (output -> OUTPUT OPAREN expRelational CPAREN EOF .)


state 171

    (55) expRelational -> plusMinus opRelational expRelational . pointCheckOpRel
    (56) pointCheckOpRel -> .

    CPAREN          reduce using rule 56 (pointCheckOpRel -> .)
    EOF             reduce using rule 56 (pointCheckOpRel -> .)

    pointCheckOpRel                shift and go to state 187

state 172

    (64) plusMinus -> multDiv pointCheckPlusMinus PLUS . pointPushPlusMinus plusMinus
    (67) pointPushPlusMinus -> .

    OPAREN          reduce using rule 67 (pointPushPlusMinus -> .)
    INT             reduce using rule 67 (pointPushPlusMinus -> .)
    DEC             reduce using rule 67 (pointPushPlusMinus -> .)
    STRING          reduce using rule 67 (pointPushPlusMinus -> .)
    ID              reduce using rule 67 (pointPushPlusMinus -> .)

    pointPushPlusMinus             shift and go to state 188

state 173

    (65) plusMinus -> multDiv pointCheckPlusMinus MINUS . pointPushPlusMinus plusMinus
    (67) pointPushPlusMinus -> .

    OPAREN          reduce using rule 67 (pointPushPlusMinus -> .)
    INT             reduce using rule 67 (pointPushPlusMinus -> .)
    DEC             reduce using rule 67 (pointPushPlusMinus -> .)
    STRING          reduce using rule 67 (pointPushPlusMinus -> .)
    ID              reduce using rule 67 (pointPushPlusMinus -> .)

    pointPushPlusMinus             shift and go to state 189

state 174

    (69) multDiv -> expParen pointCheckMultDiv MULTIPLY . pointPushMultDiv multDiv
    (72) pointPushMultDiv -> .

    OPAREN          reduce using rule 72 (pointPushMultDiv -> .)
    INT             reduce using rule 72 (pointPushMultDiv -> .)
    DEC             reduce using rule 72 (pointPushMultDiv -> .)
    STRING          reduce using rule 72 (pointPushMultDiv -> .)
    ID              reduce using rule 72 (pointPushMultDiv -> .)

    pointPushMultDiv               shift and go to state 190

state 175

    (70) multDiv -> expParen pointCheckMultDiv DIVIDE . pointPushMultDiv multDiv
    (72) pointPushMultDiv -> .

    OPAREN          reduce using rule 72 (pointPushMultDiv -> .)
    INT             reduce using rule 72 (pointPushMultDiv -> .)
    DEC             reduce using rule 72 (pointPushMultDiv -> .)
    STRING          reduce using rule 72 (pointPushMultDiv -> .)
    ID              reduce using rule 72 (pointPushMultDiv -> .)

    pointPushMultDiv               shift and go to state 191

state 176

    (94) whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET . body CBRACKET
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (100) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT pointPushAssignment expAssignment
    (97) input -> . INPUT OPAREN ID CPAREN EOF
    (98) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (94) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (95) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (96) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (85) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 100 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    body                           shift and go to state 192
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 177

    (95) ifCond -> IF OPAREN expRelational CPAREN OBRACKET . body CBRACKET
    (25) body -> . varsDef body
    (26) body -> . statements body
    (27) body -> . epsilon
    (35) varsDef -> . VAR objType var EOF
    (36) varsDef -> . VAR varSimpleType var EOF
    (28) statements -> . assignmentDef
    (29) statements -> . input
    (30) statements -> . output
    (31) statements -> . voidCall
    (32) statements -> . whileCycle
    (33) statements -> . ifCond
    (34) statements -> . classCall
    (100) epsilon -> .
    (48) assignmentDef -> . ID ASSIGNMENT pointPushAssignment expAssignment
    (97) input -> . INPUT OPAREN ID CPAREN EOF
    (98) output -> . OUTPUT OPAREN expRelational CPAREN EOF
    (24) voidCall -> . ID OPAREN paramCall CPAREN EOF
    (94) whileCycle -> . WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (95) ifCond -> . IF OPAREN expRelational CPAREN OBRACKET body CBRACKET
    (96) ifCond -> . ifCond ELSE OBRACKET body CBRACKET
    (85) classCall -> . ID MONEY ID OPAREN paramCall CPAREN EOF

    VAR             shift and go to state 48
    CBRACKET        reduce using rule 100 (epsilon -> .)
    ID              shift and go to state 56
    INPUT           shift and go to state 57
    OUTPUT          shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60

    body                           shift and go to state 193
    varsDef                        shift and go to state 45
    statements                     shift and go to state 46
    epsilon                        shift and go to state 47
    assignmentDef                  shift and go to state 49
    input                          shift and go to state 50
    output                         shift and go to state 51
    voidCall                       shift and go to state 52
    whileCycle                     shift and go to state 53
    ifCond                         shift and go to state 54
    classCall                      shift and go to state 55

state 178

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET . fxDef
    (4) fxDef -> . VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (5) fxDef -> . fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (6) fxDef -> . epsilon
    (7) fxType -> . INT
    (8) fxType -> . STRING
    (9) fxType -> . DEC
    (10) fxType -> . BOOL
    (100) epsilon -> .

    VOID            shift and go to state 10
    INT             shift and go to state 13
    STRING          shift and go to state 14
    DEC             shift and go to state 15
    BOOL            shift and go to state 16
    MAIN            reduce using rule 100 (epsilon -> .)
    CBRACKET        reduce using rule 100 (epsilon -> .)

    fxDef                          shift and go to state 194
    fxType                         shift and go to state 11
    epsilon                        shift and go to state 12

state 179

    (14) param -> paramType ID pointParam COMMA param .

    CPAREN          reduce using rule 14 (param -> paramType ID pointParam COMMA param .)


state 180

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN . ID EOF CBRACKET fxDef

    ID              shift and go to state 195


state 181

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef . pointScopeClass2 CBRACKET classDef
    (82) pointScopeClass2 -> .

    CBRACKET        reduce using rule 82 (pointScopeClass2 -> .)

    pointScopeClass2               shift and go to state 196

state 182

    (46) arrDef -> ID OSQUAREBR varCte CSQUAREBR .

    OSQUAREBR       reduce using rule 46 (arrDef -> ID OSQUAREBR varCte CSQUAREBR .)
    COMMA           reduce using rule 46 (arrDef -> ID OSQUAREBR varCte CSQUAREBR .)
    EOF             reduce using rule 46 (arrDef -> ID OSQUAREBR varCte CSQUAREBR .)


state 183

    (47) matrixDef -> arrDef OSQUAREBR varCte CSQUAREBR .

    COMMA           reduce using rule 47 (matrixDef -> arrDef OSQUAREBR varCte CSQUAREBR .)
    EOF             reduce using rule 47 (matrixDef -> arrDef OSQUAREBR varCte CSQUAREBR .)


state 184

    (53) returnCall -> ID OPAREN paramCall . CPAREN

    CPAREN          shift and go to state 197


state 185

    (85) classCall -> ID MONEY ID OPAREN paramCall CPAREN . EOF

    EOF             shift and go to state 198


state 186

    (73) expParen -> OPAREN pointFakeBackground expRelational CPAREN . pointRemoveFakeBackground
    (76) pointRemoveFakeBackground -> .

    MULTIPLY        reduce using rule 76 (pointRemoveFakeBackground -> .)
    DIVIDE          reduce using rule 76 (pointRemoveFakeBackground -> .)
    PLUS            reduce using rule 76 (pointRemoveFakeBackground -> .)
    MINUS           reduce using rule 76 (pointRemoveFakeBackground -> .)
    EQUAL           reduce using rule 76 (pointRemoveFakeBackground -> .)
    DIFFERENT       reduce using rule 76 (pointRemoveFakeBackground -> .)
    GREATERTHAN     reduce using rule 76 (pointRemoveFakeBackground -> .)
    GREATERTHANEQ   reduce using rule 76 (pointRemoveFakeBackground -> .)
    LESSTHAN        reduce using rule 76 (pointRemoveFakeBackground -> .)
    LESSTHANEQ      reduce using rule 76 (pointRemoveFakeBackground -> .)
    CPAREN          reduce using rule 76 (pointRemoveFakeBackground -> .)
    EOF             reduce using rule 76 (pointRemoveFakeBackground -> .)

    pointRemoveFakeBackground      shift and go to state 199

state 187

    (55) expRelational -> plusMinus opRelational expRelational pointCheckOpRel .

    CPAREN          reduce using rule 55 (expRelational -> plusMinus opRelational expRelational pointCheckOpRel .)
    EOF             reduce using rule 55 (expRelational -> plusMinus opRelational expRelational pointCheckOpRel .)


state 188

    (64) plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus . plusMinus
    (63) plusMinus -> . multDiv pointCheckPlusMinus
    (64) plusMinus -> . multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus
    (65) plusMinus -> . multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus
    (68) multDiv -> . expParen pointCheckMultDiv
    (69) multDiv -> . expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> . expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (73) expParen -> . OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (74) expParen -> . varCte
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    multDiv                        shift and go to state 110
    plusMinus                      shift and go to state 200
    expParen                       shift and go to state 111
    varCte                         shift and go to state 112

state 189

    (65) plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus . plusMinus
    (63) plusMinus -> . multDiv pointCheckPlusMinus
    (64) plusMinus -> . multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus
    (65) plusMinus -> . multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus
    (68) multDiv -> . expParen pointCheckMultDiv
    (69) multDiv -> . expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> . expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (73) expParen -> . OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (74) expParen -> . varCte
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    multDiv                        shift and go to state 110
    plusMinus                      shift and go to state 201
    expParen                       shift and go to state 111
    varCte                         shift and go to state 112

state 190

    (69) multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv . multDiv
    (68) multDiv -> . expParen pointCheckMultDiv
    (69) multDiv -> . expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> . expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (73) expParen -> . OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (74) expParen -> . varCte
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    expParen                       shift and go to state 111
    multDiv                        shift and go to state 202
    varCte                         shift and go to state 112

state 191

    (70) multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv . multDiv
    (68) multDiv -> . expParen pointCheckMultDiv
    (69) multDiv -> . expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv
    (70) multDiv -> . expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv
    (73) expParen -> . OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground
    (74) expParen -> . varCte
    (87) varCte -> . INT pointINT
    (88) varCte -> . DEC pointDEC
    (89) varCte -> . STRING pointSTRING
    (90) varCte -> . ID

    OPAREN          shift and go to state 107
    INT             shift and go to state 113
    DEC             shift and go to state 114
    STRING          shift and go to state 115
    ID              shift and go to state 116

    expParen                       shift and go to state 111
    multDiv                        shift and go to state 203
    varCte                         shift and go to state 112

state 192

    (94) whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body . CBRACKET

    CBRACKET        shift and go to state 204


state 193

    (95) ifCond -> IF OPAREN expRelational CPAREN OBRACKET body . CBRACKET

    CBRACKET        shift and go to state 205


state 194

    (4) fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef .

    MAIN            reduce using rule 4 (fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef .)
    CBRACKET        reduce using rule 4 (fxDef -> VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef .)


state 195

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID . EOF CBRACKET fxDef

    EOF             shift and go to state 206


state 196

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 . CBRACKET classDef

    CBRACKET        shift and go to state 207


state 197

    (53) returnCall -> ID OPAREN paramCall CPAREN .

    EOF             reduce using rule 53 (returnCall -> ID OPAREN paramCall CPAREN .)


state 198

    (85) classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .

    VAR             reduce using rule 85 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    ID              reduce using rule 85 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    INPUT           reduce using rule 85 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    OUTPUT          reduce using rule 85 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    WHILE           reduce using rule 85 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    IF              reduce using rule 85 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    CBRACKET        reduce using rule 85 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)
    RETURN          reduce using rule 85 (classCall -> ID MONEY ID OPAREN paramCall CPAREN EOF .)


state 199

    (73) expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .

    MULTIPLY        reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    DIVIDE          reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    PLUS            reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    MINUS           reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    EQUAL           reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    DIFFERENT       reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    GREATERTHAN     reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    GREATERTHANEQ   reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    LESSTHAN        reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    LESSTHANEQ      reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    CPAREN          reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)
    EOF             reduce using rule 73 (expParen -> OPAREN pointFakeBackground expRelational CPAREN pointRemoveFakeBackground .)


state 200

    (64) plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus .

    EQUAL           reduce using rule 64 (plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus .)
    DIFFERENT       reduce using rule 64 (plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus .)
    GREATERTHAN     reduce using rule 64 (plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus .)
    GREATERTHANEQ   reduce using rule 64 (plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus .)
    LESSTHAN        reduce using rule 64 (plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus .)
    LESSTHANEQ      reduce using rule 64 (plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus .)
    CPAREN          reduce using rule 64 (plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus .)
    EOF             reduce using rule 64 (plusMinus -> multDiv pointCheckPlusMinus PLUS pointPushPlusMinus plusMinus .)


state 201

    (65) plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus .

    EQUAL           reduce using rule 65 (plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus .)
    DIFFERENT       reduce using rule 65 (plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus .)
    GREATERTHAN     reduce using rule 65 (plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus .)
    GREATERTHANEQ   reduce using rule 65 (plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus .)
    LESSTHAN        reduce using rule 65 (plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus .)
    LESSTHANEQ      reduce using rule 65 (plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus .)
    CPAREN          reduce using rule 65 (plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus .)
    EOF             reduce using rule 65 (plusMinus -> multDiv pointCheckPlusMinus MINUS pointPushPlusMinus plusMinus .)


state 202

    (69) multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .

    PLUS            reduce using rule 69 (multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .)
    MINUS           reduce using rule 69 (multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .)
    EQUAL           reduce using rule 69 (multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .)
    DIFFERENT       reduce using rule 69 (multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .)
    GREATERTHAN     reduce using rule 69 (multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .)
    GREATERTHANEQ   reduce using rule 69 (multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .)
    LESSTHAN        reduce using rule 69 (multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .)
    LESSTHANEQ      reduce using rule 69 (multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .)
    CPAREN          reduce using rule 69 (multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .)
    EOF             reduce using rule 69 (multDiv -> expParen pointCheckMultDiv MULTIPLY pointPushMultDiv multDiv .)


state 203

    (70) multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .

    PLUS            reduce using rule 70 (multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .)
    MINUS           reduce using rule 70 (multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .)
    EQUAL           reduce using rule 70 (multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .)
    DIFFERENT       reduce using rule 70 (multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .)
    GREATERTHAN     reduce using rule 70 (multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .)
    GREATERTHANEQ   reduce using rule 70 (multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .)
    LESSTHAN        reduce using rule 70 (multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .)
    LESSTHANEQ      reduce using rule 70 (multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .)
    CPAREN          reduce using rule 70 (multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .)
    EOF             reduce using rule 70 (multDiv -> expParen pointCheckMultDiv DIVIDE pointPushMultDiv multDiv .)


state 204

    (94) whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .

    VAR             reduce using rule 94 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    ID              reduce using rule 94 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    INPUT           reduce using rule 94 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    OUTPUT          reduce using rule 94 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    WHILE           reduce using rule 94 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    IF              reduce using rule 94 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    CBRACKET        reduce using rule 94 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    RETURN          reduce using rule 94 (whileCycle -> WHILE OPAREN expRelational CPAREN OBRACKET body CBRACKET .)


state 205

    (95) ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .

    ELSE            reduce using rule 95 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    VAR             reduce using rule 95 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    ID              reduce using rule 95 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    INPUT           reduce using rule 95 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    OUTPUT          reduce using rule 95 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    WHILE           reduce using rule 95 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    IF              reduce using rule 95 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    CBRACKET        reduce using rule 95 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)
    RETURN          reduce using rule 95 (ifCond -> IF OPAREN expRelational CPAREN OBRACKET body CBRACKET .)


state 206

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF . CBRACKET fxDef

    CBRACKET        shift and go to state 208


state 207

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET . classDef
    (77) classDef -> . CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef
    (78) classDef -> . epsilon
    (100) epsilon -> .

    CLASS           shift and go to state 7
    VOID            reduce using rule 100 (epsilon -> .)
    INT             reduce using rule 100 (epsilon -> .)
    STRING          reduce using rule 100 (epsilon -> .)
    DEC             reduce using rule 100 (epsilon -> .)
    BOOL            reduce using rule 100 (epsilon -> .)
    MAIN            reduce using rule 100 (epsilon -> .)

    classDef                       shift and go to state 209
    epsilon                        shift and go to state 8

state 208

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET . fxDef
    (4) fxDef -> . VOID FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body CBRACKET fxDef
    (5) fxDef -> . fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef
    (6) fxDef -> . epsilon
    (7) fxType -> . INT
    (8) fxType -> . STRING
    (9) fxType -> . DEC
    (10) fxType -> . BOOL
    (100) epsilon -> .

    VOID            shift and go to state 10
    INT             shift and go to state 13
    STRING          shift and go to state 14
    DEC             shift and go to state 15
    BOOL            shift and go to state 16
    MAIN            reduce using rule 100 (epsilon -> .)
    CBRACKET        reduce using rule 100 (epsilon -> .)

    fxType                         shift and go to state 11
    fxDef                          shift and go to state 210
    epsilon                        shift and go to state 12

state 209

    (77) classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .

    VOID            reduce using rule 77 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)
    INT             reduce using rule 77 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)
    STRING          reduce using rule 77 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)
    DEC             reduce using rule 77 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)
    BOOL            reduce using rule 77 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)
    MAIN            reduce using rule 77 (classDef -> CLASS pointClass ID pointClassName OBRACKET ATTRIBUTES COLON pointAtt METHODS COLON pointScopeClass fxDef pointScopeClass2 CBRACKET classDef .)


state 210

    (5) fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef .

    MAIN            reduce using rule 5 (fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef .)
    CBRACKET        reduce using rule 5 (fxDef -> fxType FX pointFx ID pointFxId OPAREN param CPAREN OBRACKET body RETURN ID EOF CBRACKET fxDef .)

